{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/publicPath","webpack:///./src/pieces.js","webpack:///./src/helpers/getActualBoard.js","webpack:///./node_modules/chess.js/chess.js","webpack:///./src/minimaxAI.js","webpack:///./src/uciBoard.js","webpack:///./src/helpers/getOpeningMoves.js","webpack:///./src/helpers/getBestMoveToOpen.js","webpack:///./src/helpers/getPieceToMove.js","webpack:///./src/helpers/getOneSidePossibleMoves.js","webpack:///./src/helpers/getCheck.js","webpack:///./src/helpers/getGridFromFen.js","webpack:///./src/sounds/movesound.mp3","webpack:///./src/sounds/checksound.mp3","webpack:///./src/sounds/capturesound.mp3","webpack:///./src/chessAI.js","webpack:///./src/sounds/castlesound.mp3","webpack:///./src/index.js","webpack:///./src/helpers/getMaterialInBoard.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export const pieces = {\r\n        'P': {\r\n            'name': 'pawn',\r\n            'color': 'white',\r\n            'mg_values':[[\r\n                0,   0,   0,   0,   0,   0,  0,   0,\r\n                98, 134,  61,  95,  68, 126, 34, -11,\r\n                -6,   7,  26,  31,  65,  56, 25, -20,\r\n                -14,  13,   6,  21,  23,  12, 17, -23,\r\n                -27,  -2,  -5,  12,  17,   6, 10, -25,\r\n                -26,  -4,  -4, -10,   3,   3, 33, -12,\r\n                -35,  -1, -20, -23, -15,  24, 38, -22,\r\n                0,   0,   0,   0,   0,   0,  0,   0], 82],\r\n            'eg_values':[[\r\n                0,   0,   0,   0,   0,   0,   0,   0,\r\n                178, 173, 158, 134, 147, 132, 165, 187,\r\n                94, 100,  85,  67,  56,  53,  82,  84,\r\n                32,  24,  13,   5,  -2,   4,  17,  17,\r\n                13,   9,  -3,  -7,  -7,  -8,   3,  -1,\r\n                4,   7,  -6,   1,   0,  -5,  -1,  -8,\r\n                13,   8,   8,  10,  13,   0,   2,  -7,\r\n                0,   0,   0,   0,   0,   0,   0,   0], 94],\r\n            'moves': [\r\n                [-1, 0]\r\n            ],\r\n            'captures': [\r\n                [-1, -1],\r\n                [-1, 1]\r\n            ],\r\n            'promotes': [\r\n                'queen',\r\n                'rook',\r\n                'bishop',\r\n                'knight'\r\n            ],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wp.png'\r\n        },\r\n        'R': {\r\n            'name': 'rook',\r\n            'color': 'white',\r\n            'mg_values':[[\r\n                32,  42,  32,  51, 63,  9,  31,  43,\r\n                27,  32,  58,  62, 80, 67,  26,  44,\r\n                -5,  19,  26,  36, 17, 45,  61,  16,\r\n               -24, -11,   7,  26, 24, 35,  -8, -20,\r\n               -36, -26, -12,  -1,  9, -7,   6, -23,\r\n               -45, -25, -16, -17,  3,  0,  -5, -33,\r\n               -44, -16, -20,  -9, -1, 11,  -6, -71,\r\n               -19, -13,   1,  17, 16,  7, -37, -26], 477],\r\n            'eg_values':[[\r\n                13, 10, 18, 15, 12,  12,   8,   5,\r\n                11, 13, 13, 11, -3,   3,   8,   3,\r\n                7,  7,  7,  5,  4,  -3,  -5,  -3,\r\n                4,  3, 13,  1,  2,   1,  -1,   2,\r\n                3,  5,  8,  4, -5,  -6,  -8, -11,\r\n                -4,  0, -5, -1, -7, -12,  -8, -16,\r\n                -6, -6,  0,  2, -9,  -9, -11,  -3,\r\n                -9,  2,  3, -1, -5, -13,   4, -20], 512],\r\n            'moves': [\r\n                [-1, 0],\r\n                [1, 0],\r\n                [0, -1],\r\n                [0, 1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wr.png'\r\n        },\r\n        'N': {\r\n            'name': 'knight',\r\n            'color': 'white',\r\n            'mg_values': [[\r\n                -167, -89, -34, -49,  61, -97, -15, -107,\r\n                -73, -41,  72,  36,  23,  62,   7,  -17,\r\n                -47,  60,  37,  65,  84, 129,  73,   44,\r\n                 -9,  17,  19,  53,  37,  69,  18,   22,\r\n                -13,   4,  16,  13,  28,  19,  21,   -8,\r\n                -23,  -9,  12,  10,  19,  17,  25,  -16,\r\n                -29, -53, -12,  -3,  -1,  18, -14,  -19,\r\n               -105, -21, -58, -33, -17, -28, -19,  -23], 337],\r\n            'eg_values': [[\r\n                -58, -38, -13, -28, -31, -27, -63, -99,\r\n                -25,  -8, -25,  -2,  -9, -25, -24, -52,\r\n                -24, -20,  10,   9,  -1,  -9, -19, -41,\r\n                -17,   3,  22,  22,  22,  11,   8, -18,\r\n                -18,  -6,  16,  25,  16,  17,   4, -18,\r\n                -23,  -3,  -1,  15,  10,  -3, -20, -22,\r\n                -42, -20, -10,  -5,  -2, -20, -23, -44,\r\n                -29, -51, -23, -15, -22, -18, -50, -64], 281],\r\n            'moves': [\r\n                [1, 2],\r\n                [2, 1],\r\n                [-1, 2],\r\n                [-2, 1],\r\n                [-2, -1],\r\n                [-1, -2],\r\n                [1, -2],\r\n                [2, -1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wn.png'\r\n        },\r\n        'B': {\r\n            'name': 'bishop',\r\n            'color': 'white',\r\n            'mg_values': [[\r\n                -29,   4, -82, -37, -25, -42,   7,  -8,\r\n                -26,  16, -18, -13,  30,  59,  18, -47,\r\n                -16,  37,  43,  40,  35,  50,  37,  -2,\r\n                -4,   5,  19,  50,  37,  37,   7,  -2,\r\n                -6,  13,  13,  26,  34,  12,  10,   4,\r\n                0,  15,  15,  15,  14,  27,  18,  10,\r\n                4,  15,  16,   0,   7,  21,  33,   1,\r\n                -33,  -3, -14, -21, -13, -12, -39, -21], 365],\r\n            'eg_values': [[\r\n                -14, -21, -11,  -8, -7,  -9, -17, -24,\r\n                -8,  -4,   7, -12, -3, -13,  -4, -14,\r\n                2,  -8,   0,  -1, -2,   6,   0,   4,\r\n                -3,   9,  12,   9, 14,  10,   3,   2,\r\n                -6,   3,  13,  19,  7,  10,  -3,  -9,\r\n                -12,  -3,   8,  10, 13,   3,  -7, -15,\r\n                -14, -18,  -7,  -1,  4,  -9, -15, -27,\r\n                -23,  -9, -23,  -5, -9, -16,  -5, -17], 297],\r\n            'moves': [\r\n                [-1, -1],\r\n                [-1, 1],\r\n                [1, -1],\r\n                [1, 1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wb.png'\r\n        },\r\n        'Q': {\r\n            'name': 'queen',\r\n            'color': 'white',\r\n            'mg_values': [[\r\n                -28,   0,  29,  12,  59,  44,  43,  45,\r\n                -24, -39,  -5,   1, -16,  57,  28,  54,\r\n                -13, -17,   7,   8,  29,  56,  47,  57,\r\n                -27, -27, -16, -16,  -1,  17,  -2,   1,\r\n                 -9, -26,  -9, -10,  -2,  -4,   3,  -3,\r\n                -14,   2, -11,  -2,  -5,   2,  14,   5,\r\n                -35,  -8,  11,   2,   8,  15,  -3,   1,\r\n                 -1, -18,  -9,  10, -15, -25, -31, -50], 1025],\r\n            'eg_values': [[\r\n                -9,  22,  22,  27,  27,  19,  10,  20,\r\n                -17,  20,  32,  41,  58,  25,  30,   0,\r\n                -20,   6,   9,  49,  47,  35,  19,   9,\r\n                3,  22,  24,  45,  57,  40,  57,  36,\r\n                -18,  28,  19,  47,  31,  34,  39,  23,\r\n                -16, -27,  15,   6,   9,  17,  10,   5,\r\n                -22, -23, -30, -16, -16, -23, -36, -32,\r\n                -33, -28, -22, -43,  -5, -32, -20, -41], 936],\r\n            'moves': [\r\n                [-1, -1],\r\n                [-1, 1],\r\n                [1, -1],\r\n                [1, 1],\r\n                [0, -1],\r\n                [0, 1],\r\n                [-1, 0],\r\n                [1, 0]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wq.png'\r\n        },\r\n        'K': {\r\n            'name': 'king',\r\n            'color': 'white',\r\n            'mg_values': [[\r\n                -65,  23,  16, -15, -56, -34,   2,  13,\r\n                29,  -1, -20,  -7,  -8,  -4, -38, -29,\r\n                -9,  24,   2, -16, -20,   6,  22, -22,\r\n                -17, -20, -12, -27, -30, -25, -14, -36,\r\n                -49,  -1, -27, -39, -46, -44, -33, -51,\r\n                -14, -14, -22, -46, -44, -30, -15, -27,\r\n                1,   7,  -8, -64, -43, -16,   9,   8,\r\n                -15,  36,  12, -54,   8, -28,  24,  14], 0],\r\n            'eg_values': [[\r\n                -74, -35, -18, -18, -11,  15,   4, -17,\r\n                -12,  17,  14,  17,  17,  38,  23,  11,\r\n                10,  17,  23,  15,  20,  45,  44,  13,\r\n                -8,  22,  24,  27,  26,  33,  26,   3,\r\n                -18,  -4,  21,  24,  27,  23,   9, -11,\r\n                -19,  -3,  11,  21,  23,  16,   7,  -9,\r\n                -27, -11,   4,  13,  14,   4,  -5, -17,\r\n                -53, -34, -21, -11, -28, -14, -24, -43], 0],\r\n            'moves': [\r\n                [0, 1],\r\n                [0, -1],\r\n                [1, 0],\r\n                [-1, 0],\r\n                [1, 1],\r\n                [-1, 1],\r\n                [1, -1],\r\n                [-1, -1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/wk.png'\r\n        },\r\n        'p': {\r\n            'name': 'pawn',\r\n            'color': 'black',\r\n            'mg_values':[[\r\n                0, 0, 0, 0, 0, 0, 0, 0, \r\n                -22, 38, 24, -15, -23, -20, -1, -35, \r\n                -12, 33, 3, 3, -10, -4, -4, -26, \r\n                -25, 10, 6, 17, 12, -5, -2, -27, -23, 17, 12, 23, 21, 6, 13, -14, -20, 25, 56, 65, 31, 26, 7, -6, -11, 34, 126, 68, 95, 61, 134, 98, 0, 0, 0, 0, 0, 0, 0, 0], 82],\r\n            'eg_values':[[\r\n                0, 0, 0, 0, 0, 0, 0, 0,\r\n                -7, 2, 0, 13, 10, 8, 8, 13, \r\n                -8, -1, -5, 0, 1, -6, 7, 4, \r\n                -1, 3, -8, -7, -7, -3, 9, 13, \r\n                17, 17, 4, -2, 5, 13, 24, 32, \r\n                84, 82, 53, 56, 67, 85, 100, 94, \r\n                187, 165, 132, 147, 134, 158, 173, 178, \r\n                0, 0, 0, 0, 0, 0, 0, 0], 94],\r\n                \r\n            'moves': [\r\n                [1, 0]\r\n            ],\r\n            'captures': [\r\n                [1, -1],\r\n                [1, 1]\r\n            ],\r\n            'promotes': [\r\n                'queen',\r\n                'rook',\r\n                'bishop',\r\n                'knight'\r\n            ],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/bp.png'\r\n        },\r\n        'r': {\r\n            'name': 'rook',\r\n            'color': 'black',\r\n            'mg_values':[[\r\n                -26, -37, 7, 16, 17, 1, -13, -19, -71, -6, 11, -1, -9, -20, -16, -44, -33, -5, 0, 3, -17, -16, -25, -45, -23, 6, -7, 9, -1, -12, -26, -36, -20, -8, 35, 24, 26, 7, -11, -24, 16, 61, 45, 17, 36, 26, 19, -5, 44, 26, 67, 80, 62, 58, 32, 27, 43, 31, 9, 63, 51, 32, 42, 32], 477],\r\n            'eg_values':[[\r\n                -20, 4, -13, -5, -1, 3, 2, -9, -3, -11, -9, -9, 2, 0, -6, -6, -16, -8, -12, -7, -1, -5, 0, -4, -11, -8, -6, -5, 4, 8, 5, 3, 2, -1, 1, 2, 1, 13, 3, 4, -3, -5, -3, 4, 5, 7, 7, 7, 3, 8, 3, -3, 11, 13, 13, 11, 5, 8, 12, 12, 15, 18, 10, 13], 512],\r\n            'moves': [\r\n                [0, 1],\r\n                [0, -1],\r\n                [1, 0],\r\n                [-1, 0]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/br.png'\r\n        },\r\n        'n': {\r\n            'name': 'knight',\r\n            'color': 'black',\r\n            'mg_values': [[\r\n                -23, -19, -28, -17, -33, -58, -21, -105, -19, -14, 18, -1, -3, -12, -53, -29, -16, 25, 17, 19, 10, 12, -9, -23, -8, 21, 19, 28, 13, 16, 4, -13, 22, 18, 69, 37, 53, 19, 17, -9, 44, 73, 129, 84, 65, 37, 60, -47, -17, 7, 62, 23, 36, 72, -41, -73, -107, -15, -97, 61, -49, -34, -89, -167], 337],\r\n            'eg_values': [[\r\n                -64, -50, -18, -22, -15, -23, -51, -29, -44, -23, -20, -2, -5, -10, -20, -42, -22, -20, -3, 10, 15, -1, -3, -23, -18, 4, 17, 16, 25, 16, -6, -18, -18, 8, 11, 22, 22, 22, 3, -17, -41, -19, -9, -1, 9, 10, -20, -24, -52, -24, -25, -9, -2, -25, -8, -25, -99, -63, -27, -31, -28, -13, -38, -58], 281],\r\n            'moves': [\r\n                [1, 2],\r\n                [2, 1],\r\n                [-1, 2],\r\n                [-2, 1],\r\n                [-2, -1],\r\n                [-1, -2],\r\n                [1, -2],\r\n                [2, -1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/bn.png'\r\n        },\r\n        'b': {\r\n            'name': 'bishop',\r\n            'color': 'black',\r\n            'mg_values': [[\r\n                -21, -39, -12, -13, -21, -14, -3, -33, 1, 33, 21, 7, 0, 16, 15, 4, 10, 18, 27, 14, 15, 15, 15, 0, 4, 10, 12, 34, 26, 13, 13, -6, -2, 7, 37, 37, 50, 19, 5, -4, -2, 37, 50, 35, 40, 43, 37, -16, -47, 18, 59, 30, -13, -18, 16, -26, -8, 7, -42, -25, -37, -82, 4, -29], 365],\r\n            'eg_values': [[\r\n                -17, -5, -16, -9, -5, -23, -9, -23, -27, -15, -9, 4, -1, -7, -18, -14, -15, -7, 3, 13, 10, 8, -3, -12, -9, -3, 10, 7, 19, 13, 3, -6, 2, 3, 10, 14, 9, 12, 9, -3, 4, 0, 6, -2, -1, 0, -8, 2, -14, -4, -13, -3, -12, 7, -4, -8, -24, -17, -9, -7, -8, -11, -21, -14], 297],\r\n            'moves': [\r\n                [1, 1],\r\n                [-1, -1],\r\n                [-1, 1],\r\n                [1, -1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/bb.png'\r\n        },\r\n        'q': {\r\n            'name': 'queen',\r\n            'color': 'black',\r\n            'mg_values': [[\r\n                -50, -31, -25, -15, 10, -9, -18, -1, 1, -3, 15, 8, 2, 11, -8, -35, 5, 14, 2, -5, -2, -11, 2, -14, -3, 3, -4, -2, -10, -9, -26, -9, 1, -2, 17, -1, -16, -16, -27, -27, 57, 47, 56, 29, 8, 7, -17, -13, 54, 28, 57, -16, 1, -5, -39, -24, 45, 43, 44, 59, 12, 29, 0, -28], 1025],\r\n            'eg_values': [[\r\n                -41, -20, -32, -5, -43, -22, -28, -33, -32, -36, -23, -16, -16, -30, -23, -22, 5, 10, 17, 9, 6, 15, -27, -16, 23, 39, 34, 31, 47, 19, 28, -18, 36, 57, 40, 57, 45, 24, 22, 3, 9, 19, 35, 47, 49, 9, 6, -20, 0, 30, 25, 58, 41, 32, 20, -17, 20, 10, 19, 27, 27, 22, 22, -9], 936],\r\n            'moves': [\r\n                [1, 1],\r\n                [-1, -1],\r\n                [-1, 1],\r\n                [1, -1],\r\n                [0, 1],\r\n                [0, -1],\r\n                [1, 0],\r\n                [-1, 0]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/bq.png'\r\n        },\r\n        'k': {\r\n            'name': 'king',\r\n            'color': 'black',\r\n            'mg_values': [[\r\n                14, 24, -28, 8, -54, 12, 36, -15, 8, 9, -16, -43, -64, -8, 7, 1, -27, -15, -30, -44, -46, -22, -14, -14, -51, -33, -44, -46, -39, -27, -1, -49, -36, -14, -25, -30, -27, -12, -20, -17, -22, 22, 6, -20, -16, 2, 24, -9, -29, -38, -4, -8, -7, -20, -1, 29, 13, 2, -34, -56, -15, 16, 23, -65], 0],\r\n            'eg_values': [[\r\n                -43, -24, -14, -28, -11, -21, -34, -53, -17, -5, 4, 14, 13, 4, -11, -27, -9, 7, 16, 23, 21, 11, -3, -19, -11, 9, 23, 27, 24, 21, -4, -18, 3, 26, 33, 26, 27, 24, 22, -8, 13, 44, 45, 20, 15, 23, 17, 10, 11, 23, 38, 17, 17, 14, 17, -12, -17, 4, 15, -11, -18, -18, -35, -74], 0],\r\n            'moves': [\r\n                [0, 1],\r\n                [0, -1],\r\n                [1, 0],\r\n                [-1, 0],\r\n                [1, 1],\r\n                [-1, 1],\r\n                [1, -1],\r\n                [-1, -1]\r\n            ],\r\n            'captures': [],\r\n            'promotes': [],\r\n            'image': 'https://images.chesscomfiles.com/chess-themes/pieces/neo/150/bk.png'\r\n        }\r\n}\r\n","\r\nexport const getActualBoard = () => {\r\n    let board = []\r\n    for (let i = 0; i < 8; i++) {\r\n        board[i] = []\r\n        for (let j = 0; j < 8; j++) {\r\n            const cellType = document.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`).getAttribute('data-type')\r\n            if (cellType !== ' ') {\r\n                board[i][j] = cellType\r\n            }\r\n            else {\r\n                board[i][j] = ' '\r\n            }\r\n        }\r\n    }\r\n    return board\r\n}","/*\n * Copyright (c) 2022, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*']\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\n\nconst BITS = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\nconst RANK_1 = 7\nconst RANK_2 = 6\nconst RANK_3 = 5\nconst RANK_4 = 4\nconst RANK_5 = 3\nconst RANK_6 = 2\nconst RANK_7 = 1\nconst RANK_8 = 0\n\n// prettier-ignore\nconst SQUARE_MAP = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\n\nconst ROOKS = {\n  w: [\n    { square: SQUARE_MAP.a1, flag: BITS.QSIDE_CASTLE },\n    { square: SQUARE_MAP.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: SQUARE_MAP.a8, flag: BITS.QSIDE_CASTLE },\n    { square: SQUARE_MAP.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst PARSER_STRICT = 0\nconst PARSER_SLOPPY = 1\n\n/* this function is used to uniquely identify ambiguous moves */\nfunction get_disambiguator(move, moves) {\n  var from = move.from\n  var to = move.to\n  var piece = move.piece\n\n  var ambiguities = 0\n  var same_rank = 0\n  var same_file = 0\n\n  for (var i = 0, len = moves.length; i < len; i++) {\n    var ambig_from = moves[i].from\n    var ambig_to = moves[i].to\n    var ambig_piece = moves[i].piece\n\n    /* if a move of the same piece type ends on the same to square, we'll\n     * need to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n      ambiguities++\n\n      if (rank(from) === rank(ambig_from)) {\n        same_rank++\n      }\n\n      if (file(from) === file(ambig_from)) {\n        same_file++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    /* if there exists a similar moving piece on the same rank and file as\n     * the move in question, use the square as the disambiguator\n     */\n    if (same_rank > 0 && same_file > 0) {\n      return algebraic(from)\n    } else if (same_file > 0) {\n      /* if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      /* else use the file symbol */\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction infer_piece_type(san) {\n  var piece_type = san.charAt(0)\n  if (piece_type >= 'a' && piece_type <= 'h') {\n    var matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  piece_type = piece_type.toLowerCase()\n  if (piece_type === 'o') {\n    return KING\n  }\n  return piece_type\n}\n\n// parses all of the decorators out of a SAN string\nfunction stripped_san(move) {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\n/*****************************************************************************\n * UTILITY FUNCTIONS\n ****************************************************************************/\nfunction rank(i) {\n  return i >> 4\n}\n\nfunction file(i) {\n  return i & 15\n}\n\nfunction algebraic(i) {\n  var f = file(i),\n    r = rank(i)\n  return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\n}\n\nfunction swap_color(c) {\n  return c === WHITE ? BLACK : WHITE\n}\n\nfunction is_digit(c) {\n  return '0123456789'.indexOf(c) !== -1\n}\n\nfunction clone(obj) {\n  var dupe = obj instanceof Array ? [] : {}\n\n  for (var property in obj) {\n    if (typeof property === 'object') {\n      dupe[property] = clone(obj[property])\n    } else {\n      dupe[property] = obj[property]\n    }\n  }\n\n  return dupe\n}\n\nfunction trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\n/***************************************************************************\n * PUBLIC CONSTANTS\n **************************************************************************/\n\nexport const BLACK = 'b'\nexport const WHITE = 'w'\n\nexport const EMPTY = -1\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport const SQUARES = (function () {\n  /* from the ECMA-262 spec (section 12.6.4):\n   * \"The mechanics of enumerating the properties ... is\n   * implementation dependent\"\n   * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n   * ordered correctly\n   */\n  var keys = []\n  for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n    if (i & 0x88) {\n      i += 7\n      continue\n    }\n    keys.push(algebraic(i))\n  }\n  return keys\n})()\n\nexport const FLAGS = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\nexport const Chess = function (fen) {\n  var board = new Array(128)\n  var kings = { w: EMPTY, b: EMPTY }\n  var turn = WHITE\n  var castling = { w: 0, b: 0 }\n  var ep_square = EMPTY\n  var half_moves = 0\n  var move_number = 1\n  var history = []\n  var header = {}\n  var comments = {}\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION)\n  } else {\n    load(fen)\n  }\n\n  function clear(keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    board = new Array(128)\n    kings = { w: EMPTY, b: EMPTY }\n    turn = WHITE\n    castling = { w: 0, b: 0 }\n    ep_square = EMPTY\n    half_moves = 0\n    move_number = 1\n    history = []\n    if (!keep_headers) header = {}\n    comments = {}\n    update_setup(generate_fen())\n  }\n\n  function prune_comments() {\n    var reversed_history = []\n    var current_comments = {}\n    var copy_comment = function (fen) {\n      if (fen in comments) {\n        current_comments[fen] = comments[fen]\n      }\n    }\n    while (history.length > 0) {\n      reversed_history.push(undo_move())\n    }\n    copy_comment(generate_fen())\n    while (reversed_history.length > 0) {\n      make_move(reversed_history.pop())\n      copy_comment(generate_fen())\n    }\n    comments = current_comments\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION)\n  }\n\n  function load(fen, keep_headers) {\n    if (typeof keep_headers === 'undefined') {\n      keep_headers = false\n    }\n\n    var tokens = fen.split(/\\s+/)\n    var position = tokens[0]\n    var square = 0\n\n    if (!validate_fen(fen).valid) {\n      return false\n    }\n\n    clear(keep_headers)\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK\n        put({ type: piece.toLowerCase(), color: color }, algebraic(square))\n        square++\n      }\n    }\n\n    turn = tokens[1]\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARE_MAP[tokens[3]]\n    half_moves = parseInt(tokens[4], 10)\n    move_number = parseInt(tokens[5], 10)\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square',\n    }\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/)\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] }\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(parseInt(tokens[5])) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] }\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(parseInt(tokens[4])) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] }\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] }\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] }\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] }\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/')\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] }\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0\n      var previous_was_number = false\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] }\n          }\n          sum_fields += parseInt(rows[i][k], 10)\n          previous_was_number = true\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] }\n          }\n          sum_fields += 1\n          previous_was_number = false\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] }\n      }\n    }\n\n    if (\n      (tokens[3][1] == '3' && tokens[1] == 'w') ||\n      (tokens[3][1] == '6' && tokens[1] == 'b')\n    ) {\n      return { valid: false, error_number: 11, error: errors[11] }\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] }\n  }\n\n  function generate_fen() {\n    var empty = 0\n    var fen = ''\n\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      if (board[i] == null) {\n        empty++\n      } else {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        var color = board[i].color\n        var piece = board[i].type\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== SQUARE_MAP.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    var cflags = ''\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K'\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q'\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k'\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q'\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-'\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1]\n      }\n    }\n    return header\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1'\n      header['FEN'] = fen\n    } else {\n      delete header['SetUp']\n      delete header['FEN']\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARE_MAP[square]]\n    return piece ? { type: piece.type, color: piece.color } : null\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARE_MAP)) {\n      return false\n    }\n\n    var sq = SQUARE_MAP[square]\n\n    /* don't let the user place more than one king */\n    if (\n      piece.type == KING &&\n      !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\n    ) {\n      return false\n    }\n\n    board[sq] = { type: piece.type, color: piece.color }\n    if (piece.type === KING) {\n      kings[piece.color] = sq\n    }\n\n    update_setup(generate_fen())\n\n    return true\n  }\n\n  function remove(square) {\n    var piece = get(square)\n    board[SQUARE_MAP[square]] = null\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY\n    }\n\n    update_setup(generate_fen())\n\n    return piece\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type,\n    }\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION\n      move.promotion = promotion\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN\n    }\n    return move\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (\n        board[from].type === PAWN &&\n        (rank(to) === RANK_8 || rank(to) === RANK_1)\n      ) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]))\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags))\n      }\n    }\n\n    var moves = []\n    var us = turn\n    var them = swap_color(us)\n    var second_rank = { b: RANK_7, w: RANK_2 }\n\n    var first_sq = SQUARE_MAP.a8\n    var last_sq = SQUARE_MAP.h1\n    var single_square = false\n\n    /* do we want legal moves? */\n    var legal =\n      typeof options !== 'undefined' && 'legal' in options\n        ? options.legal\n        : true\n\n    var piece_type =\n      typeof options !== 'undefined' &&\n      'piece' in options &&\n      typeof options.piece === 'string'\n        ? options.piece.toLowerCase()\n        : true\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARE_MAP) {\n        first_sq = last_sq = SQUARE_MAP[options.square]\n        single_square = true\n      } else {\n        /* invalid square */\n        return []\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece == null || piece.color !== us) {\n        continue\n      }\n\n      if (piece.type === PAWN && (piece_type === true || piece_type === PAWN)) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0]\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL)\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1]\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN)\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j]\n          if (square & 0x88) continue\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE)\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\n          }\n        }\n      } else if (piece_type === true || piece_type === piece.type) {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j]\n          var square = i\n\n          while (true) {\n            square += offset\n            if (square & 0x88) break\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL)\n            } else {\n              if (board[square].color === us) break\n              add_move(board, moves, i, square, BITS.CAPTURE)\n              break\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (piece_type === true || piece_type === KING) {\n      if (!single_square || last_sq === kings[us]) {\n        /* king-side castling */\n        if (castling[us] & BITS.KSIDE_CASTLE) {\n          var castling_from = kings[us]\n          var castling_to = castling_from + 2\n\n          if (\n            board[castling_from + 1] == null &&\n            board[castling_to] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from + 1) &&\n            !attacked(them, castling_to)\n          ) {\n            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\n          }\n        }\n\n        /* queen-side castling */\n        if (castling[us] & BITS.QSIDE_CASTLE) {\n          var castling_from = kings[us]\n          var castling_to = castling_from - 2\n\n          if (\n            board[castling_from - 1] == null &&\n            board[castling_from - 2] == null &&\n            board[castling_from - 3] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from - 1) &&\n            !attacked(them, castling_to)\n          ) {\n            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\n          }\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = []\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i])\n      }\n      undo_move()\n    }\n\n    return legal_moves\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, moves) {\n    var output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        var disambiguator = get_disambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    make_move(move)\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    undo_move()\n\n    return output\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue\n\n      var piece = board[i]\n      var difference = i - square\n      var index = difference + 119\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true\n          } else {\n            if (piece.color === BLACK) return true\n          }\n          continue\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true\n\n        var offset = RAYS[index]\n        var j = i + offset\n\n        var blocked = false\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) return true\n      }\n    }\n\n    return false\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color])\n  }\n\n  function in_check() {\n    return king_attacked(turn)\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0\n  }\n\n  function insufficient_material() {\n    var pieces = {}\n    var bishops = []\n    var num_pieces = 0\n    var sq_color = 0\n\n    for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n      sq_color = (sq_color + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      var piece = board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color)\n        }\n        num_pieces++\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true\n    } else if (\n      /* k vs. kn .... or .... k vs. kb */\n      num_pieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (num_pieces === pieces[BISHOP] + 2) {\n      /* kb vs. kb where any number of bishops are all on the same color */\n      var sum = 0\n      var len = bishops.length\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = []\n    var positions = {}\n    var repetition = false\n\n    while (true) {\n      var move = undo_move()\n      if (!move) break\n      moves.push(move)\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0, 4).join(' ')\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1\n      if (positions[fen] >= 3) {\n        repetition = true\n      }\n\n      if (!moves.length) {\n        break\n      }\n      make_move(moves.pop())\n    }\n\n    return repetition\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number,\n    })\n  }\n\n  function make_move(move) {\n    var us = turn\n    var them = swap_color(us)\n    push(move)\n\n    board[move.to] = board[move.from]\n    board[move.from] = null\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null\n      } else {\n        board[move.to + 16] = null\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us }\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1\n        var castling_from = move.to + 1\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1\n        var castling_from = move.to - 2\n        board[castling_to] = board[castling_from]\n        board[castling_from] = null\n      }\n\n      /* turn off castling */\n      castling[us] = ''\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          castling[us] & ROOKS[us][i].flag\n        ) {\n          castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          castling[them] & ROOKS[them][i].flag\n        ) {\n          castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16\n      } else {\n        ep_square = move.to + 16\n      }\n    } else {\n      ep_square = EMPTY\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0\n    } else {\n      half_moves++\n    }\n\n    if (turn === BLACK) {\n      move_number++\n    }\n    turn = swap_color(turn)\n  }\n\n  function undo_move() {\n    var old = history.pop()\n    if (old == null) {\n      return null\n    }\n\n    var move = old.move\n    kings = old.kings\n    turn = old.turn\n    castling = old.castling\n    ep_square = old.ep_square\n    half_moves = old.half_moves\n    move_number = old.move_number\n\n    var us = turn\n    var them = swap_color(turn)\n\n    board[move.from] = board[move.to]\n    board[move.from].type = move.piece // to undo any promotions\n    board[move.to] = null\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them }\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index\n      if (us === BLACK) {\n        index = move.to - 16\n      } else {\n        index = move.to + 16\n      }\n      board[index] = { type: PAWN, color: them }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1\n        castling_from = move.to - 1\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2\n        castling_from = move.to + 1\n      }\n\n      board[castling_to] = board[castling_from]\n      board[castling_from] = null\n    }\n\n    return move\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    var clean_move = stripped_san(move)\n\n    // the move parsers is a 2-step state\n    for (var parser = 0; parser < 2; parser++) {\n      if (parser == PARSER_SLOPPY) {\n        // only run the sloppy parse if explicitly requested\n        if (!sloppy) {\n          return null\n        }\n\n        // The sloppy parser allows the user to parse non-standard chess\n        // notations. This parser is opt-in (by specifying the\n        // '{ sloppy: true }' setting) and is only run after the Standard\n        // Algebraic Notation (SAN) parser has failed.\n        //\n        // When running the sloppy parser, we'll run a regex to grab the piece,\n        // the to/from square, and an optional promotion piece. This regex will\n        // parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n        // f7f8q, b1c3\n\n        // NOTE: Some positions and moves may be ambiguous when using the\n        // sloppy parser. For example, in this position:\n        // 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1, the move b1c3 may be interpreted\n        // as Nc3 or B1c3 (a disambiguated bishop move). In these cases, the\n        // sloppy parser will default to the most most basic interpretation\n        // (which is b1c3 parsing to Nc3).\n\n        // FIXME: these var's are hoisted into function scope, this will need\n        // to change when switching to const/let\n\n        var overly_disambiguated = false\n\n        var matches = clean_move.match(\n          /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n        )\n        if (matches) {\n          var piece = matches[1]\n          var from = matches[2]\n          var to = matches[3]\n          var promotion = matches[4]\n\n          if (from.length == 1) {\n            overly_disambiguated = true\n          }\n        } else {\n          // The [a-h]?[1-8]? portion of the regex below handles moves that may\n          // be overly disambiguated (e.g. Nge7 is unnecessary and non-standard\n          // when there is one legal knight move to e7). In this case, the value\n          // of 'from' variable will be a rank or file, not a square.\n          var matches = clean_move.match(\n            /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/\n          )\n\n          if (matches) {\n            var piece = matches[1]\n            var from = matches[2]\n            var to = matches[3]\n            var promotion = matches[4]\n\n            if (from.length == 1) {\n              var overly_disambiguated = true\n            }\n          }\n        }\n      }\n\n      var piece_type = infer_piece_type(clean_move)\n      var moves = generate_moves({\n        legal: true,\n        piece: piece ? piece : piece_type,\n      })\n\n      for (var i = 0, len = moves.length; i < len; i++) {\n        switch (parser) {\n          case PARSER_STRICT: {\n            if (clean_move === stripped_san(move_to_san(moves[i], moves))) {\n              return moves[i]\n            }\n            break\n          }\n          case PARSER_SLOPPY: {\n            if (matches) {\n              // hand-compare move properties with the results from our sloppy\n              // regex\n              if (\n                (!piece || piece.toLowerCase() == moves[i].piece) &&\n                SQUARE_MAP[from] == moves[i].from &&\n                SQUARE_MAP[to] == moves[i].to &&\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)\n              ) {\n                return moves[i]\n              } else if (overly_disambiguated) {\n                // SPECIAL CASE: we parsed a move string that may have an\n                // unneeded rank/file disambiguator (e.g. Nge7).  The 'from'\n                // variable will\n                var square = algebraic(moves[i].from)\n                if (\n                  (!piece || piece.toLowerCase() == moves[i].piece) &&\n                  SQUARE_MAP[to] == moves[i].to &&\n                  (from == square[0] || from == square[1]) &&\n                  (!promotion || promotion.toLowerCase() == moves[i].promotion)\n                ) {\n                  return moves[i]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return null\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move)\n    move.san = move_to_san(move, generate_moves({ legal: true }))\n    move.to = algebraic(move.to)\n    move.from = algebraic(move.from)\n\n    var flags = ''\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag]\n      }\n    }\n    move.flags = flags\n\n    return move\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({ legal: false })\n    var nodes = 0\n    var color = turn\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i])\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1)\n          nodes += child_nodes\n        } else {\n          nodes++\n        }\n      }\n      undo_move()\n    }\n\n    return nodes\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function (fen) {\n      return load(fen)\n    },\n\n    reset: function () {\n      return reset()\n    },\n\n    moves: function (options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options)\n      var moves = []\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (\n          typeof options !== 'undefined' &&\n          'verbose' in options &&\n          options.verbose\n        ) {\n          moves.push(make_pretty(ugly_moves[i]))\n        } else {\n          moves.push(\n            move_to_san(ugly_moves[i], generate_moves({ legal: true }))\n          )\n        }\n      }\n\n      return moves\n    },\n\n    in_check: function () {\n      return in_check()\n    },\n\n    in_checkmate: function () {\n      return in_checkmate()\n    },\n\n    in_stalemate: function () {\n      return in_stalemate()\n    },\n\n    in_draw: function () {\n      return (\n        half_moves >= 100 ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    insufficient_material: function () {\n      return insufficient_material()\n    },\n\n    in_threefold_repetition: function () {\n      return in_threefold_repetition()\n    },\n\n    game_over: function () {\n      return (\n        half_moves >= 100 ||\n        in_checkmate() ||\n        in_stalemate() ||\n        insufficient_material() ||\n        in_threefold_repetition()\n      )\n    },\n\n    validate_fen: function (fen) {\n      return validate_fen(fen)\n    },\n\n    fen: function () {\n      return generate_fen()\n    },\n\n    board: function () {\n      var output = [],\n        row = []\n\n      for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n        if (board[i] == null) {\n          row.push(null)\n        } else {\n          row.push({\n            square: algebraic(i),\n            type: board[i].type,\n            color: board[i].color,\n          })\n        }\n        if ((i + 1) & 0x88) {\n          output.push(row)\n          row = []\n          i += 8\n        }\n      }\n\n      return output\n    },\n\n    pgn: function (options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\n'\n      var max_width =\n        typeof options === 'object' && typeof options.max_width === 'number'\n          ? options.max_width\n          : 0\n      var result = []\n      var header_exists = false\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\n        header_exists = true\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline)\n      }\n\n      var append_comment = function (move_string) {\n        var comment = comments[generate_fen()]\n        if (typeof comment !== 'undefined') {\n          var delimiter = move_string.length > 0 ? ' ' : ''\n          move_string = `${move_string}${delimiter}{${comment}}`\n        }\n        return move_string\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = []\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      var moves = []\n      var move_string = ''\n\n      /* special case of a commented starting position with no moves */\n      if (reversed_history.length === 0) {\n        moves.push(append_comment(''))\n      }\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        move_string = append_comment(move_string)\n        var move = reversed_history.pop()\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...'\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string)\n          }\n          move_string = move_number + '.'\n        }\n\n        move_string =\n          move_string + ' ' + move_to_san(move, generate_moves({ legal: true }))\n        make_move(move)\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(append_comment(move_string))\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result)\n      }\n\n      /* history should be back to what it was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ')\n      }\n\n      var strip = function () {\n        if (result.length > 0 && result[result.length - 1] === ' ') {\n          result.pop()\n          return true\n        }\n        return false\n      }\n\n      /* NB: this does not preserve comment whitespace. */\n      var wrap_comment = function (width, move) {\n        for (var token of move.split(' ')) {\n          if (!token) {\n            continue\n          }\n          if (width + token.length > max_width) {\n            while (strip()) {\n              width--\n            }\n            result.push(newline)\n            width = 0\n          }\n          result.push(token)\n          width += token.length\n          result.push(' ')\n          width++\n        }\n        if (strip()) {\n          width--\n        }\n        return width\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0\n      for (var i = 0; i < moves.length; i++) {\n        if (current_width + moves[i].length > max_width) {\n          if (moves[i].includes('{')) {\n            current_width = wrap_comment(current_width, moves[i])\n            continue\n          }\n        }\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop()\n          }\n\n          result.push(newline)\n          current_width = 0\n        } else if (i !== 0) {\n          result.push(' ')\n          current_width++\n        }\n        result.push(moves[i])\n        current_width += moves[i].length\n      }\n\n      return result.join('')\n    },\n\n    load_pgn: function (pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\')\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char =\n          typeof options === 'object' &&\n          typeof options.newline_char === 'string'\n            ? options.newline_char\n            : '\\r?\\n'\n        var header_obj = {}\n        var headers = header.split(new RegExp(mask(newline_char)))\n        var key = ''\n        var value = ''\n\n        for (var i = 0; i < headers.length; i++) {\n          var regex = /^\\s*\\[([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/\n          key = headers[i].replace(regex, '$1')\n          value = headers[i].replace(regex, '$2')\n          if (trim(key).length > 0) {\n            header_obj[key] = value\n          }\n        }\n\n        return header_obj\n      }\n\n      // strip whitespace from head/tail of PGN block\n      pgn = pgn.trim()\n\n      var newline_char =\n        typeof options === 'object' && typeof options.newline_char === 'string'\n          ? options.newline_char\n          : '\\r?\\n'\n\n      // RegExp to split header. Takes advantage of the fact that header and movetext\n      // will always have a blank line between them (ie, two newline_char's).\n      // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\s*\\r?\\n){2}/\n      var header_regex = new RegExp(\n        '^(\\\\[((?:' +\n          mask(newline_char) +\n          ')|.)*\\\\])' +\n          '(?:\\\\s*' +\n          mask(newline_char) +\n          '){2}'\n      )\n\n      // If no header given, begin with moves.\n      var header_string = header_regex.test(pgn)\n        ? header_regex.exec(pgn)[1]\n        : ''\n\n      // Put the board in the starting position\n      reset()\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options)\n      var fen = ''\n\n      for (var key in headers) {\n        // check to see user is including fen (possibly with wrong tag case)\n        if (key.toLowerCase() === 'fen') {\n          fen = headers[key]\n        }\n        set_header([key, headers[key]])\n      }\n\n      /* sloppy parser should attempt to load a fen tag, even if it's\n       * the wrong case and doesn't include a corresponding [SetUp \"1\"] tag */\n      if (sloppy) {\n        if (fen) {\n          if (!load(fen, true)) {\n            return false\n          }\n        }\n      } else {\n        /* strict parser - load the starting position indicated by [Setup '1']\n         * and [FEN position] */\n        if (headers['SetUp'] === '1') {\n          if (!('FEN' in headers && load(headers['FEN'], true))) {\n            // second argument to load: don't clear the headers\n            return false\n          }\n        }\n      }\n\n      /* NB: the regexes below that delete move numbers, recursive\n       * annotations, and numeric annotation glyphs may also match\n       * text in comments. To prevent this, we transform comments\n       * by hex-encoding them in place and decoding them again after\n       * the other tokens have been deleted.\n       *\n       * While the spec states that PGN files should be ASCII encoded,\n       * we use {en,de}codeURIComponent here to support arbitrary UTF8\n       * as a convenience for modern users */\n\n      var to_hex = function (string) {\n        return Array.from(string)\n          .map(function (c) {\n            /* encodeURI doesn't transform most ASCII characters,\n             * so we handle these ourselves */\n            return c.charCodeAt(0) < 128\n              ? c.charCodeAt(0).toString(16)\n              : encodeURIComponent(c).replace(/\\%/g, '').toLowerCase()\n          })\n          .join('')\n      }\n\n      var from_hex = function (string) {\n        return string.length == 0\n          ? ''\n          : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))\n      }\n\n      var encode_comment = function (string) {\n        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ')\n        return `{${to_hex(string.slice(1, string.length - 1))}}`\n      }\n\n      var decode_comment = function (string) {\n        if (string.startsWith('{') && string.endsWith('}')) {\n          return from_hex(string.slice(1, string.length - 1))\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn\n        .replace(header_string, '')\n        .replace(\n          /* encode comments so they don't get deleted below */\n          new RegExp(`(\\{[^}]*\\})+?|;([^${mask(newline_char)}]*)`, 'g'),\n          function (match, bracket, semicolon) {\n            return bracket !== undefined\n              ? encode_comment(bracket)\n              : ' ' + encode_comment(`{${semicolon.slice(1)}}`)\n          }\n        )\n        .replace(new RegExp(mask(newline_char), 'g'), ' ')\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '')\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '')\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '')\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/))\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',')\n      var move = ''\n\n      var result = ''\n\n      for (var half_move = 0; half_move < moves.length; half_move++) {\n        var comment = decode_comment(moves[half_move])\n        if (comment !== undefined) {\n          comments[generate_fen()] = comment\n          continue\n        }\n\n        move = move_from_san(moves[half_move], sloppy)\n\n        /* invalid move */\n        if (move == null) {\n          /* was the move an end of game marker */\n          if (TERMINATION_MARKERS.indexOf(moves[half_move]) > -1) {\n            result = moves[half_move]\n          } else {\n            return false\n          }\n        } else {\n          /* reset the end of game marker if making a valid move */\n          result = ''\n          make_move(move)\n        }\n      }\n\n      /* Per section 8.2.6 of the PGN spec, the Result tag pair must match\n       * match the termination marker. Only do this when headers are present,\n       * but the result tag is missing\n       */\n      if (result && Object.keys(header).length && !header['Result']) {\n        set_header(['Result', result])\n      }\n\n      return true\n    },\n\n    header: function () {\n      return set_header(arguments)\n    },\n\n    turn: function () {\n      return turn\n    },\n\n    move: function (move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy =\n        typeof options !== 'undefined' && 'sloppy' in options\n          ? options.sloppy\n          : false\n\n      var move_obj = null\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy)\n      } else if (typeof move === 'object') {\n        var moves = generate_moves()\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (\n            move.from === algebraic(moves[i].from) &&\n            move.to === algebraic(moves[i].to) &&\n            (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)\n          ) {\n            move_obj = moves[i]\n            break\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj)\n\n      make_move(move_obj)\n\n      return pretty_move\n    },\n\n    undo: function () {\n      var move = undo_move()\n      return move ? make_pretty(move) : null\n    },\n\n    clear: function () {\n      return clear()\n    },\n\n    put: function (piece, square) {\n      return put(piece, square)\n    },\n\n    get: function (square) {\n      return get(square)\n    },\n\n    ascii() {\n      var s = '   +------------------------+\\n'\n      for (var i = SQUARE_MAP.a8; i <= SQUARE_MAP.h1; i++) {\n        /* display the rank */\n        if (file(i) === 0) {\n          s += ' ' + '87654321'[rank(i)] + ' |'\n        }\n\n        /* empty piece */\n        if (board[i] == null) {\n          s += ' . '\n        } else {\n          var piece = board[i].type\n          var color = board[i].color\n          var symbol =\n            color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n          s += ' ' + symbol + ' '\n        }\n\n        if ((i + 1) & 0x88) {\n          s += '|\\n'\n          i += 8\n        }\n      }\n      s += '   +------------------------+\\n'\n      s += '     a  b  c  d  e  f  g  h'\n\n      return s\n    },\n\n    remove: function (square) {\n      return remove(square)\n    },\n\n    perft: function (depth) {\n      return perft(depth)\n    },\n\n    square_color: function (square) {\n      if (square in SQUARE_MAP) {\n        var sq_0x88 = SQUARE_MAP[square]\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\n      }\n\n      return null\n    },\n\n    history: function (options) {\n      var reversed_history = []\n      var move_history = []\n      var verbose =\n        typeof options !== 'undefined' &&\n        'verbose' in options &&\n        options.verbose\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move())\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop()\n        if (verbose) {\n          move_history.push(make_pretty(move))\n        } else {\n          move_history.push(move_to_san(move, generate_moves({ legal: true })))\n        }\n        make_move(move)\n      }\n\n      return move_history\n    },\n\n    get_comment: function () {\n      return comments[generate_fen()]\n    },\n\n    set_comment: function (comment) {\n      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']')\n    },\n\n    delete_comment: function () {\n      var comment = comments[generate_fen()]\n      delete comments[generate_fen()]\n      return comment\n    },\n\n    get_comments: function () {\n      prune_comments()\n      return Object.keys(comments).map(function (fen) {\n        return { fen: fen, comment: comments[fen] }\n      })\n    },\n\n    delete_comments: function () {\n      prune_comments()\n      return Object.keys(comments).map(function (fen) {\n        var comment = comments[fen]\n        delete comments[fen]\n        return { fen: fen, comment: comment }\n      })\n    },\n  }\n}\n","import { Chess } from 'chess.js'\r\nimport { pieces } from './pieces.js'\r\n\r\nlet game = null\r\n\r\nlet values = 'mg_values'\r\n\r\nexport const minimaxAI = {\r\n    minimaxRoot: function(depth, fen, isMaximisingPlayer, isEndGame) {\r\n        game = new Chess(fen)\r\n        let newGameMoves = game.moves()\r\n        let bestMove = -9999\r\n        let bestMoveFound = null\r\n\r\n        if (isEndGame) values = 'eg_values'\r\n        else values = 'mg_values'\r\n    \r\n        for(let i = 0; i < newGameMoves.length; i++) {\r\n            let newGameMove = newGameMoves[i]\r\n            game.move(newGameMove)\r\n            let value = this.minimax(depth - 1, game, -10000, 10000, !isMaximisingPlayer)\r\n            game.undo()\r\n            if(value >= bestMove) {\r\n                bestMove = value\r\n                bestMoveFound = newGameMove;\r\n            }\r\n        }\r\n\r\n        return game.move(bestMoveFound, {sloppy: true})\r\n    },\r\n    minimax: function (depth, game, alpha, beta, isMaximisingPlayer) {\r\n        if (depth === 0) {\r\n            return -this.betterEvaluateBoard(game.board());\r\n        }\r\n    \r\n        let newGameMoves = game.moves();\r\n    \r\n        if (isMaximisingPlayer) {\r\n            let bestMove = -9999;\r\n            for (let i = 0; i < newGameMoves.length; i++) {\r\n                game.move(newGameMoves[i]);\r\n                bestMove = Math.max(bestMove, this.minimax(depth - 1, game, alpha, beta, !isMaximisingPlayer));\r\n                game.undo();\r\n                alpha = Math.max(alpha, bestMove);\r\n                if (beta <= alpha) {\r\n                    return bestMove;\r\n                }\r\n            }\r\n            return bestMove;\r\n        } else {\r\n            let bestMove = 9999;\r\n            for (let i = 0; i < newGameMoves.length; i++) {\r\n                game.move(newGameMoves[i]);\r\n                bestMove = Math.min(bestMove, this.minimax(depth - 1, game, alpha, beta, !isMaximisingPlayer));\r\n                game.undo();\r\n                beta = Math.min(beta, bestMove);\r\n                if (beta <= alpha) {\r\n                    return bestMove;\r\n                }\r\n            }\r\n            return bestMove;\r\n        }\r\n    },\r\n    betterEvaluateBoard: function() {\r\n        let wp = 0\r\n        let bp = 0\r\n        let wn = 0\r\n        let bn = 0\r\n        let wb = 0\r\n        let bb = 0\r\n        let wr = 0\r\n        let br = 0\r\n        let wq = 0\r\n        let bq = 0\r\n        let pawnsq = 0\r\n        let knightsq = 0\r\n        let bishopsq = 0\r\n        let rooksq = 0\r\n        let queensq = 0\r\n        let kingsq = 0\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (game.board()[i][j] === null) {\r\n                    continue\r\n                }\r\n                const pieceType = game.board()[i][j].type\r\n                const pieceColor = game.board()[i][j].color\r\n                if (pieceColor === 'w') pieceType = pieceType.toUpperCase()\r\n                else pieceType = pieceType.toLowerCase()\r\n\r\n                if (pieceType === 'P') {\r\n                    wp++\r\n                    pawnsq += pieces['P'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'p') {\r\n                    bp++\r\n                    pawnsq -= pieces['p'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'N') {\r\n                    wn++\r\n                    knightsq += pieces['N'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'n') {\r\n                    bn++\r\n                    knightsq -= pieces['n'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'B') {\r\n                    wb++\r\n                    bishopsq += pieces['B'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'b') {\r\n                    bb++\r\n                    bishopsq -= pieces['b'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'R') {\r\n                    wr++\r\n                    rooksq += pieces['R'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'r') {\r\n                    br++\r\n                    rooksq -= pieces['r'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'Q') {\r\n                    wq++\r\n                    queensq += pieces['Q'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'q') {\r\n                    bq++\r\n                    queensq -= pieces['q'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'K') {\r\n                    kingsq += pieces['K'][values][0][i * 8 + j]\r\n                }\r\n                else if (pieceType === 'k') {\r\n                    kingsq -= pieces['k'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n\r\n        const material = 100 * (wp - bp) + 320 * (wn - bn) + 330 * (wb - bb) + 500 * (wr - br) + 900 * (wq - bq)\r\n\r\n        const evaluation = material + pawnsq + knightsq + bishopsq + rooksq + queensq + kingsq\r\n        if (game.turn() === 'w') {\r\n            return evaluation\r\n        }\r\n        else {\r\n            return -evaluation\r\n        }\r\n    }\r\n\r\n}","export const uciBoard = [\r\n    ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8'],\r\n    ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7'],\r\n    ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6'],\r\n    ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5'],\r\n    ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4'],\r\n    ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3'],\r\n    ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2'],\r\n    ['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1']\r\n]","\r\n\r\nexport const getOpeningMoves = async( actualFEN ) => {\r\n    const resp = await fetch(`https://explorer.lichess.ovh/masters?fen=${actualFEN}`, {method: 'GET'})\r\n    const data = await resp.json()\r\n    return data\r\n}","import { uciBoard } from \"../uciBoard\"\r\nimport { getOpeningMoves } from \"./getOpeningMoves\"\r\n\r\nexport const getBestMoveToOpen = async( actualFEN ) => {\r\n\r\n    let bestOpeningMove = null\r\n    let averageBlackWin = 0\r\n    let openingMoves = null\r\n\r\n    const data = await getOpeningMoves( actualFEN )\r\n\r\n    if (data.black === 0) {\r\n        return null\r\n    }\r\n    else {\r\n        openingMoves = data.moves\r\n        for (let i = 0; i < openingMoves.length; i++) {\r\n            const sum = openingMoves[i].white + openingMoves[i].black + openingMoves[i].draws\r\n            const blackPercentage = openingMoves[i].black / sum\r\n            if (blackPercentage > averageBlackWin) {\r\n                averageBlackWin = blackPercentage\r\n                bestOpeningMove = openingMoves[i].uci\r\n            }\r\n        }\r\n\r\n        let startingPos = []\r\n        let endingPos = []\r\n        for (let i = 0; i < uciBoard.length; i++) {\r\n            for (let j = 0; j < uciBoard[i].length; j++) {\r\n                if (uciBoard[i][j] === bestOpeningMove.slice(0, 2)) {\r\n                    startingPos = [i, j]\r\n                }\r\n                else if (uciBoard[i][j] === bestOpeningMove.slice(2, 5)) {\r\n                    endingPos = [i, j]\r\n                }\r\n            }\r\n        }\r\n        \r\n        const bestMoveToOpen = [startingPos, endingPos]\r\n        return bestMoveToOpen\r\n    }\r\n}","import { minimaxAI } from \"../minimaxAI\"\r\nimport { uciBoard } from \"../uciBoard\"\r\nimport { getBestMoveToOpen } from \"./getBestMoveToOpen\"\r\n\r\nexport const getPieceToMove = async( actualFEN, isEndGame, isCheck ) => {\r\n\r\n    let pieceToMove\r\n    let pieceToMovePos\r\n    let bestMove\r\n\r\n    await getBestMoveToOpen( actualFEN ).then(data => {\r\n        if (data === null) {\r\n            data = minimaxAI.minimaxRoot(3, actualFEN, true, isEndGame)\r\n            if (data === null) {\r\n                if (!isCheck) {\r\n                    setTimeout(() => {\r\n                        alert('Stalemate!')\r\n                    }, 100)\r\n                }\r\n                else {\r\n                    setTimeout(() => {\r\n                        alert('Checkmate!')\r\n                    }, 100)\r\n                }\r\n                return\r\n            }\r\n            bestMove = data.to\r\n            pieceToMovePos = data.from\r\n        }\r\n        else {\r\n            pieceToMovePos = data[0]\r\n            bestMove = data[1]\r\n        }\r\n        for (let i = 0; i < uciBoard.length; i++) {\r\n            for (let j = 0; j < uciBoard[i].length; j++) {\r\n                if (uciBoard[i][j] === pieceToMovePos) {\r\n                    pieceToMovePos = [i, j]\r\n                }\r\n                if (uciBoard[i][j] === bestMove) {\r\n                    bestMove = [i, j]\r\n                }\r\n            }\r\n        }\r\n\r\n        pieceToMove = document.querySelector(`[data-row=\"${pieceToMovePos[0]}\"][data-col=\"${pieceToMovePos[1]}\"]`)\r\n\r\n    })\r\n\r\n    return [pieceToMove, bestMove]\r\n}","import { getPossibleMoves } from '../index.js'\r\nimport { getCheck } from './getCheck.js'\r\n\r\nexport const getOneSidePossibleMoves = (color, board, checkForCheck) => {\r\n    let piecesOfColorInBoard = []\r\n    for (let row = 0; row < 8; row++) {\r\n        for (let col = 0; col < 8; col++) {\r\n            const piece = board[row][col]\r\n            if (piece !== ' ' && piece === piece?.toUpperCase() && color === 'white') {\r\n                piecesOfColorInBoard.push([row, col])\r\n            }\r\n            else if (piece !== ' ' && piece === piece?.toLowerCase() && color === 'black') {\r\n                piecesOfColorInBoard.push([row, col])\r\n            }\r\n        }\r\n    }\r\n    let possibleMovesFromSide = []\r\n    for (let i = 0; i < piecesOfColorInBoard.length; i++) {\r\n        const piecePos = piecesOfColorInBoard[i]\r\n        const row = Number(piecePos[0])\r\n        const col = Number(piecePos[1])\r\n\r\n        let boardCopy = []\r\n        for (let k = 0; k < board.length; k++) {\r\n            boardCopy[k] = []\r\n            for (let l = 0; l < board[k].length; l++) {\r\n                boardCopy[k][l] = board[k][l]\r\n            }\r\n        }\r\n        if (boardCopy[row][col] !== ' ') {\r\n            let possibleMovesToCheck = getPossibleMoves(row, col, boardCopy)\r\n\r\n            if (checkForCheck) {\r\n                let movesToRemove = []\r\n                for (let i = 0; i < possibleMovesToCheck.length; i++) {\r\n                    let boardToCheck = []\r\n                    board.map((row, index) => boardToCheck[index] = [...row])\r\n\r\n                    const nextMove = possibleMovesToCheck[i]\r\n                    const piecePos = [Number(row), Number(col)]\r\n                    boardToCheck[nextMove[0]][nextMove[1]] = boardToCheck[piecePos[0]][piecePos[1]]\r\n                    boardToCheck[piecePos[0]][piecePos[1]] = ' '\r\n                    if (getCheck(boardToCheck, color)) {\r\n                        movesToRemove.push(nextMove)\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < movesToRemove.length; i++) {\r\n                    possibleMovesToCheck.splice(possibleMovesToCheck.indexOf(movesToRemove[i]), 1)\r\n                }\r\n            }\r\n            possibleMovesFromSide.push([piecePos, [...possibleMovesToCheck]])\r\n\r\n        }\r\n    }\r\n    return possibleMovesFromSide\r\n}","import { getOneSidePossibleMoves } from \"./getOneSidePossibleMoves\"\r\n\r\nexport const getCheck = (board, colorToCheck) => {\r\n\r\n    let possibleOppositeColorMoves = []\r\n    if (colorToCheck === 'white') {\r\n        possibleOppositeColorMoves = getOneSidePossibleMoves('black', board, false)\r\n        possibleOppositeColorMoves.map(move => move.splice(0, 1))\r\n    }\r\n    else if (colorToCheck === 'black') {\r\n        possibleOppositeColorMoves = getOneSidePossibleMoves('white', board, false)\r\n        possibleOppositeColorMoves.map(move => move.splice(0, 1))\r\n    }\r\n\r\n    let king = null\r\n    if (colorToCheck === 'white') king = 'K'\r\n    else king = 'k'\r\n\r\n    let kingPos = []\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            if (board[i][j] === king) {\r\n                kingPos = [i, j]\r\n            }\r\n        }\r\n    }\r\n\r\n    let isThereACheck = false\r\n    for (let i = 0; i < possibleOppositeColorMoves.length; i++) {\r\n        if (possibleOppositeColorMoves.some(cell => cell[0].some(cell => cell[0] === kingPos[0] && cell[1] === kingPos[1]))) {\r\n            isThereACheck = true\r\n        }\r\n    }\r\n    if (isThereACheck) {\r\n        return true\r\n    }\r\n    return false\r\n}","\r\nexport const getGridFromFen = (fen) => {\r\n    let rows = fen.split(' ')[0].split('/')\r\n    let pieces = []\r\n    for (let i = 0; i < 8; i++) {\r\n        pieces[i] = []\r\n        const row = rows[i].split('')\r\n        for (let j = 0; j < row.length; j++) {\r\n            if (!isNaN(Number(row[j]))) {\r\n                for (let k = 0; k < row[j]; k++) {\r\n                    pieces[i].push(' ')\r\n                }\r\n            }\r\n            else pieces[i].push(row[j])\r\n        }\r\n    }\r\n    return pieces\r\n}","export default __webpack_public_path__ + \"3ffec474411d1a3c4276d019a68d7356.mp3\";","export default __webpack_public_path__ + \"d7e096a6996bd3e3ed1e07d44610599e.mp3\";","export default __webpack_public_path__ + \"4338f39648ca229eb58ead50cec2914a.mp3\";","import { pieces } from './pieces.js'\r\nimport { checkIfCastleAndPlaceRook, getPossibleMoves } from './index.js'\r\nimport { getCheck, getOneSidePossibleMoves } from './helpers'\r\nimport movesound from './sounds/movesound.mp3'\r\nimport checksound from './sounds/checksound.mp3'\r\nimport capturesound from './sounds/capturesound.mp3'\r\n \r\nconst moveSound = new Audio(movesound)\r\nconst captureSound = new Audio(capturesound)\r\nconst checkSound = new Audio(checksound)\r\n\r\nlet values = 'mg_values'\r\n\r\nlet numberOfMoves = 1\r\n\r\nexport const chessAI = {\r\n    // make a move\r\n    makeMove: function(nextMove, pieceToMovePos, board, isDoubleMovePawn, blacksCanCastleRight, blacksCanCastleLeft) {\r\n        const pieceToMoveCell = document.querySelector(`[data-row=\"${pieceToMovePos[0]}\"][data-col=\"${pieceToMovePos[1]}\"]`)\r\n        const pieceToMoveType = board[pieceToMovePos[0]][pieceToMovePos[1]]\r\n        const nextCell = document.querySelector(`[data-row=\"${nextMove[0]}\"][data-col=\"${nextMove[1]}\"]`)\r\n        const nextCellType = board[nextMove[0]][nextMove[1]]\r\n        let isCapture = false\r\n        let canCastleRight = blacksCanCastleRight\r\n        let canCastleLeft = blacksCanCastleLeft\r\n        \r\n        if (nextCellType !== ' ') {\r\n            isCapture = true\r\n        }\r\n\r\n        checkIfCastleAndPlaceRook(nextMove, pieceToMovePos, board)\r\n\r\n        if (pieceToMoveType === 'k') {\r\n            canCastleRight = false\r\n            canCastleLeft = false\r\n        }\r\n\r\n        if (isCapture) {\r\n            captureSound.play()\r\n            nextCell.firstChild.remove()\r\n        }\r\n        else {\r\n            if (pieceToMoveType === 'P') {\r\n                const row = Number(pieceToMoveCell.getAttribute('data-row'))\r\n                if (Number(nextCell.getAttribute('data-row')) === row-2) {\r\n                    isDoubleMovePawn = true\r\n                }\r\n            }\r\n            else if (pieceToMoveType === 'p') {\r\n                const row = Number(pieceToMoveCell.getAttribute('data-row'))\r\n                if (Number(nextCell.getAttribute('data-row')) === row+2) {\r\n                    isDoubleMovePawn = true\r\n                }\r\n            }\r\n            if (isDoubleMovePawn) nextCell.setAttribute('isDoubleMovePawn', 'true')\r\n        }\r\n        if (pieceToMoveCell.getAttribute('isdoublemovepawn') === 'true') pieceToMoveCell.removeAttribute('isdoublemovepawn')\r\n        if (pieceToMoveCell.getAttribute('enpassantcapture') === 'true') pieceToMoveCell.removeAttribute('enpassantcapture') \r\n        moveSound.play()\r\n        nextCell.setAttribute('data-type', pieceToMoveCell.getAttribute('data-type'))\r\n        nextCell.appendChild(pieceToMoveCell.firstChild)\r\n        pieceToMoveCell.setAttribute('data-type', ' ')\r\n        numberOfMoves++\r\n\r\n        const dataArray = [pieceToMoveCell, nextCell, pieceToMoveCell.firstChild, isDoubleMovePawn, canCastleRight, canCastleLeft]\r\n\r\n        return dataArray\r\n    }\r\n   , getPieceToMove: function(isCheck, isEndGame) {\r\n        let bestMoveValue = -99999\r\n        let bestMove = null\r\n        let pieceToMove = null\r\n        let bestMovesWithSameValue = []\r\n\r\n        if (isEndGame) values = 'eg_values'\r\n        else values = 'mg_values'\r\n\r\n        const cells = document.querySelectorAll('.cell')\r\n        const actualBoard = this.getActualBoard()\r\n        const possibleMovesOfWhites = getOneSidePossibleMoves('white', actualBoard, true)\r\n\r\n        // Check best moves of every black piece and compare\r\n        for (let i = 0; i < cells.length; i++) {\r\n            const cell = cells[i]\r\n            const row = cell.getAttribute('data-row')\r\n            const col = cell.getAttribute('data-col')\r\n            const cellType = cell.getAttribute('data-type')\r\n\r\n            if (cellType !== ' ' && cell.firstChild.getAttribute('piece-color') === 'black') {\r\n                let possibleMoves = []\r\n                const pieceInCell = cell.firstChild\r\n                let board = this.getActualBoard()\r\n                let newMoveValue = 0\r\n\r\n                const pieceValue = pieces[cellType][values][1] + pieces[cellType][values][0][Number(row) * 8 + Number(col)]\r\n                possibleMovesOfWhites.map(moves => {\r\n                    const whitePieceToMoveRow = moves[0][0]\r\n                    const whitePieceToMoveCol = moves[0][1]\r\n                    const whitePieceToMoveValue = pieces[board[whitePieceToMoveRow][whitePieceToMoveCol]][values][1] + pieces[board[whitePieceToMoveRow][whitePieceToMoveCol]][values][0][Number(row) * 8 + Number(col)]\r\n                    let boardToCheck = []\r\n                    if (moves[1].some(cell => cell[0] === Number(row) && cell[1] === Number(col))) {\r\n                        let nextMoveRow = 0\r\n                        let nextMoveCol = 0\r\n                        for (let i = 0; i < moves[1].length; i++) {\r\n                            const cell = moves[1][i]\r\n                            if (cell[0] ===  Number(row) && cell[1] ===  Number(col)) {\r\n                                nextMoveRow = cell[0]\r\n                                nextMoveCol = cell[1]\r\n                            }\r\n                        }\r\n                        actualBoard.map((row, index) => boardToCheck[index] = [...row])\r\n                        boardToCheck[nextMoveRow][nextMoveCol] = boardToCheck[whitePieceToMoveRow][whitePieceToMoveCol]\r\n                        boardToCheck[whitePieceToMoveRow][whitePieceToMoveCol] = ' '\r\n                        const possibleMovesOfBlacks = getOneSidePossibleMoves('black', boardToCheck, true)\r\n                        possibleMovesOfBlacks.map(moves => {\r\n                            const blackPieceToMoveRow = moves[0][0]\r\n                            const blackPieceToMoveCol = moves[0][1]\r\n                            const blackPieceToMovePosValue = pieces[boardToCheck[blackPieceToMoveRow][blackPieceToMoveCol]][values][0][Number(row) * 8 + Number(col)]\r\n                            if (moves[1].some(cell => cell[0] === Number(row) && cell[1] === Number(col))) {\r\n                                newMoveValue = whitePieceToMoveValue - pieceValue + blackPieceToMovePosValue\r\n                                return\r\n                            }\r\n                            else {\r\n                                newMoveValue = pieceValue\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n\r\n                possibleMoves = getPossibleMoves(row, col, board)\r\n\r\n                let movesToRemove = []\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let boardToCheck = this.getActualBoard()\r\n                    const nextMove = possibleMoves[i]\r\n                    const piecePos = [Number(row), Number(col)]\r\n                    boardToCheck[nextMove[0]][nextMove[1]] = boardToCheck[piecePos[0]][piecePos[1]]\r\n                    boardToCheck[piecePos[0]][piecePos[1]] = ' '\r\n                    if(getCheck(boardToCheck, 'black')) {\r\n                        movesToRemove.push(nextMove)\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < movesToRemove.length; i++) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(movesToRemove[i]), 1)\r\n                }\r\n                \r\n                if (isCheck) {\r\n                    checkSound.play()\r\n                }\r\n                \r\n                if (possibleMoves.length > 0) {\r\n                    const newMoveData = this.getBestMove(possibleMoves, [row, col])\r\n                    newMoveValue += newMoveData[1]\r\n\r\n                    if (newMoveValue > bestMoveValue) {\r\n                        bestMove = newMoveData[0]\r\n                        pieceToMove = pieceInCell\r\n                        bestMoveValue = newMoveValue\r\n                        bestMovesWithSameValue = []\r\n                        bestMovesWithSameValue.push([bestMove, pieceInCell])\r\n                    }\r\n                    else if (newMoveValue === bestMoveValue) {\r\n                        bestMove = newMoveData[0]\r\n                        bestMovesWithSameValue.push([bestMove, pieceInCell])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (bestMovesWithSameValue.length > 0) {\r\n            const randomIndex = Math.floor(Math.random() * bestMovesWithSameValue.length)\r\n            bestMove = bestMovesWithSameValue[randomIndex][0]\r\n            pieceToMove = bestMovesWithSameValue[randomIndex][1]\r\n        }\r\n        return [pieceToMove, bestMove]\r\n   }, \r\n   // Check best move of a single piece\r\n   getBestMove: function(moves, pieceToMovePos) {\r\n        let bestMove = null\r\n        let bestMoveValue = -1\r\n        let actualBoard = this.getActualBoard()\r\n\r\n        const pieceToMoveRow = Number(pieceToMovePos[0])\r\n        const pieceToMoveCol = Number(pieceToMovePos[1])\r\n        const pieceToMoveType = actualBoard[pieceToMoveRow][pieceToMoveCol]\r\n\r\n        for (let i = 0; i < moves.length; i++) {\r\n            const move = moves[i]\r\n            const moveCellType = actualBoard[move[0]][move[1]]\r\n\r\n            let boardCopy = []\r\n            actualBoard.map((row, index) => boardCopy[index] = [...row])\r\n            boardCopy[move[0]][move[1]] = boardCopy[pieceToMoveRow][pieceToMoveCol]\r\n            boardCopy[pieceToMoveRow][pieceToMoveCol] = ' '\r\n\r\n            const possibleMovesOfWhites = getOneSidePossibleMoves('white', boardCopy, true)\r\n            \r\n            // Check the value of the move (if capture check two more moves)\r\n            const totalMoveValue = Math.min(...possibleMovesOfWhites.map(cellMoves => {\r\n                let totalMoveValue = 0\r\n                const moveRow = Number(move[0])\r\n                const moveCol = Number(move[1])\r\n                const whitePieceToMoveRow = Number(cellMoves[0][0])\r\n                const whitePieceToMoveCol = Number(cellMoves[0][1])\r\n                const pieceToMoveValue = pieces[pieceToMoveType][values][1] + pieces[pieceToMoveType][values][0][moveRow * 8 + moveCol]\r\n                \r\n                let moveValue = 0\r\n                if (moveCellType !== ' ') moveValue = pieces[moveCellType][values][1] + pieces[moveCellType][values][0][moveRow * 8 + moveCol]\r\n                if (cellMoves[1].some(cell => cell[0] === moveRow && cell[1] === moveCol)) {\r\n                    let nextMoveRow = 0\r\n                    let nextMoveCol = 0\r\n                    for (let i = 0; i < cellMoves[1].length; i++) {\r\n                        const cell = cellMoves[1][i]\r\n                        if (cell[0] === moveRow && cell[1] === moveCol) {\r\n                            nextMoveRow = cell[0]\r\n                            nextMoveCol = cell[1]\r\n                        }\r\n                    }\r\n                    let boardToCheck = []\r\n                    boardCopy.map((row, index) => boardToCheck[index] = [...row])\r\n                    \r\n                    boardToCheck[nextMoveRow][nextMoveCol] = boardToCheck[whitePieceToMoveRow][whitePieceToMoveCol]\r\n                    boardToCheck[whitePieceToMoveRow][whitePieceToMoveCol] = ' '\r\n\r\n                    let possibleMovesOfBlacks = getOneSidePossibleMoves('black', boardToCheck, true)        \r\n                    possibleMovesOfBlacks.map(move => move.splice(0, 1))\r\n                    if (possibleMovesOfBlacks.some(cell => cell[0].some(cell => cell[0] === moveRow && cell[1] === moveCol))) {\r\n                        const pieceToCaptureAfterCapture = cellMoves[1].find(cell => cell[0] === moveRow && cell[1] === moveCol)\r\n                        const pieceToCaptureAfterCaptureType = boardToCheck[pieceToCaptureAfterCapture[0]][pieceToCaptureAfterCapture[1]]\r\n                        let pieceToCaptureAfterCaptureValue = 0\r\n                        if (pieceToCaptureAfterCaptureType !== ' ') {\r\n                            pieceToCaptureAfterCaptureValue = pieces[pieceToCaptureAfterCaptureType][values][1] + pieces[pieceToCaptureAfterCaptureType][values][0][moveRow * 8 + moveCol]\r\n                        }\r\n                        totalMoveValue = moveValue - pieceToMoveValue + pieceToCaptureAfterCaptureValue\r\n                    }\r\n                    else {\r\n                        totalMoveValue = moveValue - pieceToMoveValue\r\n                    }\r\n                }\r\n                else {\r\n                    totalMoveValue = pieces[pieceToMoveType][values][0][moveRow * 8 + moveCol] + moveValue\r\n                }\r\n                return totalMoveValue\r\n            }))\r\n            \r\n            const valueToBeat = bestMove === null ? -1 : bestMoveValue\r\n\r\n            if (totalMoveValue >= valueToBeat) {\r\n                bestMove = move\r\n                bestMoveValue = totalMoveValue\r\n            }\r\n        }\r\n        if (bestMove === null || bestMove === undefined) {\r\n            bestMove = moves[Math.floor(Math.random() * moves.length)]\r\n            bestMoveValue = -1\r\n        }\r\n        return [bestMove, bestMoveValue]\r\n    },\r\n    // Evaluate board for Easy AI\r\n    evaluateBoard: function(board, color) {\r\n        const wp = this.getNumberOfPieces('white', 'P')\r\n        const wn = this.getNumberOfPieces('white', 'N')\r\n        const wb = this.getNumberOfPieces('white', 'B')\r\n        const wr = this.getNumberOfPieces('white', 'R')\r\n        const wq = this.getNumberOfPieces('white', 'Q')\r\n        const bp = this.getNumberOfPieces('black', 'p')\r\n        const bn = this.getNumberOfPieces('black', 'n')\r\n        const bb = this.getNumberOfPieces('black', 'b')\r\n        const br = this.getNumberOfPieces('black', 'r')\r\n        const bq = this.getNumberOfPieces('black', 'q')\r\n\r\n        const material = 100 * (wp - bp) + 320 * (wn - bn) + 330 * (wb - bb) + 500 * (wr - br) + 900 * (wq - bq)\r\n\r\n        let boardCopy = []\r\n        boardCopy = board.map((row, index) => boardCopy[index] = [...row])\r\n\r\n        let pawnsq = 0\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (boardCopy[i][j] === 'P') {\r\n                    pawnsq += pieces['P'][values][0][i * 8 + j]\r\n                }\r\n                else if (boardCopy[i][j] === 'p') {\r\n                    pawnsq -= pieces['p'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n\r\n        let knightsq = 0\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (boardCopy[i][j] === 'N') {\r\n                    knightsq += pieces['N'][values][0][i * 8 + j]\r\n                }\r\n                else if (boardCopy[i][j] === 'n') {\r\n                    knightsq -= pieces['n'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n\r\n        let bishopsq = 0\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (boardCopy[i][j] === 'B') {\r\n                    bishopsq += pieces['B'][values][0][i * 8 + j]\r\n                }\r\n                else if (boardCopy[i][j] === 'b') {\r\n                    bishopsq -= pieces['b'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n\r\n        let rooksq = 0\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (boardCopy[i][j] === 'R') {\r\n                    rooksq += pieces['R'][values][0][i * 8 + j]\r\n                }\r\n                else if (boardCopy[i][j] === 'r') {\r\n                    rooksq -= pieces['r'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n        \r\n        let queensq = 0\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (boardCopy[i][j] === 'Q') {\r\n                    queensq += pieces['Q'][values][0][i * 8 + j]\r\n                }\r\n                else if (boardCopy[i][j] === 'q') {\r\n                    queensq -= pieces['q'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n\r\n        let kingsq = 0\r\n        for (let i = 0; i < 8; i++) {\r\n            for (let j = 0; j < 8; j++) {\r\n                if (boardCopy[i][j] === 'K') {\r\n                    kingsq += pieces['K'][values][0][i * 8 + j]\r\n                }\r\n                else if (boardCopy[i][j] === 'k') {\r\n                    kingsq -= pieces['k'][values][0][i * 8 + j]\r\n                }\r\n            }\r\n        }\r\n        const evaluation = material + pawnsq + knightsq + bishopsq + rooksq + queensq + kingsq\r\n        if (color === 'white') {\r\n            return evaluation\r\n        }\r\n        else {\r\n            return -evaluation\r\n        }\r\n    },\r\n    getNumberOfPieces: function(color, pieceType) {\r\n        let numberOfPieces = 0\r\n        const cells = document.querySelectorAll('.cell')\r\n        for (let i = 0; i < cells.length; i++) {\r\n            const cell = cells[i]\r\n            const cellType = cell.getAttribute('data-type')\r\n            if (cellType !== ' ') {\r\n                const cellPiece = cell.firstChild\r\n                if (cellPiece.getAttribute('piece-color') === color && cellType === pieceType) {\r\n                    numberOfPieces++\r\n                }\r\n            }\r\n        }\r\n        return numberOfPieces\r\n    },\r\n    getActualBoard: function() {\r\n        let board = []\r\n        for (let i = 0; i < 8; i++) {\r\n            board[i] = []\r\n            for (let j = 0; j < 8; j++) {\r\n                const cellType = document.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`).getAttribute('data-type')\r\n                if (cellType !== ' ') {\r\n                    board[i][j] = cellType\r\n                }\r\n                else {\r\n                    board[i][j] = ' '\r\n                }\r\n            }\r\n        }\r\n        return board\r\n    },\r\n    getFenFromBoard: function(board, halfClock, cK, cQ, ck, cq) {\r\n        let fen = ''\r\n        for (let i = 0; i < 8; i++) {\r\n            let emptyCells = 0\r\n            for (let j = 0; j < 8; j++) {\r\n                if (board[i][j] === ' ') {\r\n                    emptyCells++\r\n                }\r\n                else {\r\n                    if (emptyCells > 0) {\r\n                        fen += emptyCells\r\n                        emptyCells = 0\r\n                    }\r\n                    fen += board[i][j]\r\n                }\r\n            }\r\n            if (emptyCells > 0) {\r\n                fen += emptyCells\r\n            }\r\n            if (i !== 7) {\r\n                fen += '/'\r\n            }\r\n        }\r\n        let castles = ''\r\n        if (cK) castles += 'K'\r\n        if (cQ) castles += 'Q'\r\n        if (ck) castles += 'k'\r\n        if (cq) castles += 'q'\r\n        if (castles === '') castles = '-'\r\n        \r\n        fen += ' b ' + castles + ' - '+ halfClock + ' ' + numberOfMoves\r\n        return fen\r\n    }\r\n}","export default __webpack_public_path__ + \"d5902a1bf4e8e47585eeca0a3ef1aed0.mp3\";","import \"./styles/index.scss\";\r\nimport { pieces } from './pieces.js'\r\nimport { chessAI } from './chessAI.js'\r\nimport movesound from './sounds/movesound.mp3'\r\nimport capturesound from './sounds/capturesound.mp3'\r\nimport checksound from './sounds/checksound.mp3'\r\nimport castlesound from './sounds/castlesound.mp3'\r\nimport { getPieceToMove, getPiecePosition, getActualBoard, getMaterialInBoard, getCheck, getGridFromFen, getOneSidePossibleMoves } from \"./helpers\";\r\n\r\n\r\n// Nav functions\r\nconst primaryNav = document.querySelector('.primary-navigation')\r\nconst navToggle = document.querySelector('.mobile-nav-toggle')\r\n\r\nnavToggle.addEventListener('click', () => {\r\n    const visibility = primaryNav.getAttribute('data-visible')\r\n    if (visibility === 'false') {\r\n        primaryNav.setAttribute('data-visible', 'true')\r\n        navToggle.setAttribute('aria-expanded', 'true')\r\n    } else {\r\n        primaryNav.setAttribute('data-visible', 'false')\r\n        navToggle.setAttribute('aria-expanded', 'false')\r\n    }\r\n\r\n})\r\n\r\n// Setting up initial variables\r\nconst initialFEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w'\r\n\r\nlet isPieceSelected = false\r\nlet selectedPiece = null\r\nlet AISelectedPiece = null\r\nlet whitesCanCastleRight = true\r\nlet whitesCanCastleLeft = true\r\nlet blacksCanCastleRight = true\r\nlet blacksCanCastleLeft = true\r\nlet isCapture = false\r\nlet isDoubleMovePawn = false\r\nlet turn = 'white'\r\nlet isCheck = false\r\nlet mode = 'PvsP'\r\nlet lastPieceMovedByOpponent = null\r\nlet isBetterAI = false\r\nlet isEndGame = false\r\n\r\nlet whiteTimerIntervalId = null\r\nlet blackTimerIntervalId = null\r\nlet whiteTime = 300000\r\nlet blackTime = 300000\r\n\r\nlet halfClock = 0\r\nlet possibleMoves = []\r\nlet actualFEN = ''\r\n\r\nconst moveSound = new Audio(movesound)\r\nconst castleSound = new Audio(castlesound)\r\nconst captureSound = new Audio(capturesound)\r\nconst checkSound = new Audio(checksound)\r\n\r\n// Play again button\r\nconst btn = document.getElementById(\"play-button\")\r\nbtn.addEventListener(\"click\", function () {\r\n    startGame()\r\n}, false);\r\n\r\nwindow.onload = function () {\r\n    startGame()\r\n}\r\n\r\n// Timers displays\r\nlet whitesDisplay = document.getElementsByClassName('white-timer-text'),\r\n    blacksDisplay = document.getElementsByClassName('black-timer-text'),\r\n    timerLine = document.getElementById('timer-line')\r\n\r\n// Game start\r\nconst startGame = () => {\r\n    setInitialStateVariables(initialFEN)\r\n\r\n    stopTimer(whiteTimerIntervalId)\r\n    stopTimer(blackTimerIntervalId)\r\n\r\n    whitesDisplay = [...whitesDisplay]\r\n    whitesDisplay.map((display) => display.innerHTML = '5:00')\r\n    blacksDisplay = [...blacksDisplay]\r\n    blacksDisplay.map((display) => display.innerHTML = '5:00')\r\n    timerLine.classList.add('timer-line')\r\n\r\n    turn = initialFEN.split(' ')[1] === 'w' ? 'white' : 'black'\r\n    const lastGrid = document.getElementsByClassName('grid-container')[0]\r\n\r\n    if (lastGrid != null) lastGrid.innerHTML = ''\r\n\r\n    mode = createModeSelector().value\r\n    let difficulty = 'AI'\r\n\r\n    let displays = document.getElementsByClassName('timers')\r\n    let mobileDisplays = document.getElementsByClassName('mobile-timer')\r\n    if (mode === 'PvsAI') {\r\n        difficulty = createDifficultySelector().value\r\n        displays[0].classList.add('disabled')\r\n        mobileDisplays[0].classList.add('disabled')\r\n    }\r\n    else {\r\n        createDifficultySelector().parentElement.innerHTML = ' '\r\n        displays[0].classList.remove('disabled')\r\n        mobileDisplays[0].classList.remove('disabled')\r\n    }\r\n\r\n    isBetterAI = difficulty === 'Easy' ? false : true\r\n\r\n    const grid = document.createElement('div')\r\n    grid.classList.add('grid')\r\n    lastGrid.appendChild(grid)\r\n\r\n    const piecesInBoard = getGridFromFen(initialFEN)\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n        const row = document.createElement('div')\r\n        row.classList.add('grid-row')\r\n        for (let j = 0; j < 8; j++) {\r\n            const cell = document.createElement('div')\r\n            const cellType = piecesInBoard[i][j]\r\n            const color = (j + i) % 2 === 0 ? 'white' : 'black'\r\n            cell.classList.add('cell')\r\n            placePiece(cell, cellType, color)\r\n            cell.setAttribute('data-row', i)\r\n            cell.setAttribute('data-col', j)\r\n            cell.setAttribute('data-type', cellType)\r\n            cell.setAttribute('color', color)\r\n            row.appendChild(cell)\r\n        }\r\n        if (grid != null) grid.appendChild(row)\r\n    }\r\n}\r\n\r\nconst setInitialStateVariables = (initialFEN) => {\r\n    whitesCanCastleLeft = true\r\n    whitesCanCastleRight = true\r\n    blacksCanCastleLeft = true\r\n    blacksCanCastleRight = true\r\n    const grid = getGridFromFen(initialFEN)\r\n    if (grid[7][0] !== 'R') whitesCanCastleLeft = false\r\n    if (grid[7][7] !== 'R') whitesCanCastleRight = false\r\n    if (grid[0][0] !== 'r') blacksCanCastleLeft = false\r\n    if (grid[0][7] !== 'r') blacksCanCastleRight = false\r\n\r\n    isPieceSelected = false\r\n    selectedPiece = null\r\n    AISelectedPiece = null\r\n    isCapture = false\r\n    isDoubleMovePawn = false\r\n    turn = 'white'\r\n    isCheck = false\r\n    lastPieceMovedByOpponent = null\r\n    isEndGame = false\r\n\r\n    whiteTime = 300000\r\n    blackTime = 300000\r\n}\r\n\r\nconst createFEN = () => {\r\n    const grid = document.getElementsByClassName('grid-container')[0]\r\n    const rows = grid.getElementsByClassName('grid-row')\r\n    let fen = ''\r\n    for (let i = 0; i < 8; i++) {\r\n        let row = ''\r\n        let spaceCounter = 0\r\n        const cells = rows[i].getElementsByClassName('cell')\r\n        for (let j = 0; j < 8; j++) {\r\n            const cell = cells[j]\r\n            if (cell.getAttribute('data-type') === ' ') {\r\n                spaceCounter++\r\n            }\r\n            else {\r\n                if (spaceCounter != 0) {\r\n                    row += String(spaceCounter)\r\n                    spaceCounter = 0\r\n                }\r\n                row += cell.getAttribute('data-type')\r\n            }\r\n        }\r\n        if (spaceCounter != 0) row += String(spaceCounter)\r\n        fen += row + '/'\r\n    }\r\n    fen = fen.slice(0, -1)\r\n    fen += ' ' + turn[0]\r\n    return fen\r\n}\r\n\r\n// Placing pieces on board\r\nconst placePiece = (cell, cellType) => {\r\n    const piece = document.createElement('img')\r\n    if (cellType === ' ') {\r\n        return\r\n    }\r\n    else if (cellType === cellType.toUpperCase()) {\r\n        piece.src = pieces[`${cellType}`]['image']\r\n        piece.addEventListener('click', handlePieceClick)\r\n        piece.setAttribute('piece-color', 'white')\r\n    }\r\n    else {\r\n        piece.src = pieces[`${cellType}`]['image']\r\n        piece.addEventListener('click', handlePieceClick)\r\n        piece.setAttribute('piece-color', 'black')\r\n    }\r\n    cell.appendChild(piece)\r\n}\r\n\r\n// Timers\r\nfunction startTimer(duration, display, color) {\r\n    let timer = Date.now(), minutes, seconds\r\n\r\n    if (color === 'white') {\r\n        whiteTimerIntervalId = setInterval(function () {\r\n            let elapsedTime = Date.now() - timer\r\n            whiteTime = duration - elapsedTime\r\n\r\n            minutes = Math.floor(whiteTime / (1000 * 60))\r\n            seconds = Math.floor(whiteTime % (1000 * 60) / 1000)\r\n\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    stopTimer(whiteTimerIntervalId)\r\n                    alert('Black wins!')\r\n                }\r\n                else {\r\n                    minutes--\r\n                    seconds = 59\r\n                }\r\n            }\r\n\r\n            if (seconds < 10) seconds = '0' + seconds\r\n\r\n            display.map((display) => display.innerHTML = `${minutes}:${seconds}`)\r\n        }, 100)\r\n    }\r\n    else {\r\n        blackTimerIntervalId = setInterval(function () {\r\n            let elapsedTime = Date.now() - timer\r\n            blackTime = duration - elapsedTime\r\n\r\n            minutes = Math.floor(blackTime / (1000 * 60))\r\n            seconds = Math.floor(blackTime % (1000 * 60) / 1000)\r\n\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    stopTimer(blackTimerIntervalId)\r\n                    alert('White wins!')\r\n                }\r\n                else {\r\n                    minutes--\r\n                    seconds = 59\r\n                }\r\n            }\r\n\r\n            if (seconds < 10) seconds = '0' + seconds\r\n\r\n            display.map((display) => display.innerHTML = `${minutes}:${seconds}`)\r\n        }, 100)\r\n    }\r\n}\r\n\r\nfunction stopTimer(timerIntervalId) {\r\n    clearInterval(timerIntervalId)\r\n}\r\n\r\n// Piece click event\r\nconst handlePieceClick = (e) => {\r\n    if (isPieceSelected) {\r\n        if (selectedPiece.getAttribute('piece-color') === e.target.getAttribute('piece-color')) {\r\n            removeHighlightCells()\r\n        } else {\r\n            // Capture piece\r\n            const nextMove = [Number(e.target.parentElement.getAttribute('data-row')), Number(e.target.parentElement.getAttribute('data-col'))]\r\n            const row = Number(selectedPiece.parentElement.getAttribute('data-row'))\r\n            const col = Number(selectedPiece.parentElement.getAttribute('data-col'))\r\n            let actualBoard = getActualBoard()\r\n            let possibleNextMoves = getPossibleMoves(row, col, actualBoard)\r\n            possibleMoves = [...possibleNextMoves]\r\n\r\n            let movesToRemove = []\r\n            for (let i = 0; i < possibleNextMoves.length; i++) {\r\n                let boardToCheck = getActualBoard()\r\n                const nextMove = possibleNextMoves[i]\r\n                const piecePos = [Number(row), Number(col)]\r\n                boardToCheck[nextMove[0]][nextMove[1]] = boardToCheck[piecePos[0]][piecePos[1]]\r\n                boardToCheck[piecePos[0]][piecePos[1]] = ' '\r\n                if (getCheck(boardToCheck, 'white')) {\r\n                    movesToRemove.push(nextMove)\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < movesToRemove.length; i++) {\r\n                possibleNextMoves.splice(possibleNextMoves.indexOf(movesToRemove[i]), 1)\r\n            }\r\n\r\n            const nextMoveIncluded = possibleNextMoves.some(move => move[0] === nextMove[0] && move[1] === nextMove[1])\r\n            if (nextMoveIncluded) {\r\n                isCapture = true\r\n                captureSound.play()\r\n\r\n                removeHighlightCells()\r\n\r\n                const pieceMoved = selectedPiece.cloneNode(true)\r\n                const nextCell = e.target.parentElement\r\n                pieceMoved.addEventListener('click', handlePieceClick)\r\n                e.target.parentElement.appendChild(pieceMoved)\r\n                e.target.parentElement.setAttribute('data-type', selectedPiece.parentElement.getAttribute('data-type'))\r\n                e.target.parentElement.removeChild(e.target)\r\n                selectedPiece.parentElement.setAttribute('data-type', ' ')\r\n                selectedPiece.parentElement.removeChild(selectedPiece)\r\n                selectedPiece = null\r\n                isPieceSelected = false\r\n\r\n                checkIfPromotion(e.target.parentElement, pieceMoved.parentElement)\r\n\r\n                // Start and stop timers\r\n                if (turn === 'white') {\r\n                    stopTimer(whiteTimerIntervalId)\r\n                    if (mode === 'PvsP') startTimer(blackTime, blacksDisplay, 'black')\r\n                }\r\n                else {\r\n                    stopTimer(blackTimerIntervalId)\r\n                    startTimer(whiteTime, whitesDisplay, 'white')\r\n                }\r\n\r\n                halfClock = 0\r\n\r\n                lastPieceMovedByOpponent = nextCell.firstChild\r\n                changeTurn()\r\n\r\n                // AI moves\r\n                if (mode === 'PvsAI' && turn === 'black') {\r\n                    let bestMove = null\r\n                    let pieceToMove = null\r\n                    if (!isBetterAI) {\r\n                        actualBoard = getActualBoard()\r\n                        const bestMoveData = chessAI.getPieceToMove(isCheck, isEndGame)\r\n                        pieceToMove = bestMoveData[0]\r\n                        bestMove = bestMoveData[1]\r\n                        AISelectedPiece = pieceToMove\r\n\r\n                        if (pieceToMove === null) {\r\n                            showCheckMessage()\r\n                            return\r\n                        }\r\n\r\n                        makeMove(pieceToMove, bestMove)\r\n                        startTimer(whiteTime, whitesDisplay, 'white')\r\n                        changeTurn()\r\n                    }\r\n                    else {\r\n                        const boardToCheck = getActualBoard()\r\n                        let actualFEN = chessAI.getFenFromBoard(boardToCheck, halfClock, whitesCanCastleRight, whitesCanCastleLeft, blacksCanCastleRight, blacksCanCastleLeft)\r\n\r\n                        // Fetch for opening moves and get piece to move\r\n                        getPieceToMove(actualFEN, isEndGame, isCheck).then(pieceToMoveData => {\r\n                            const bestMove = pieceToMoveData[1]\r\n                            const pieceToMove = pieceToMoveData[0].firstChild\r\n\r\n                            makeMove(pieceToMove, bestMove)\r\n                            changeTurn()\r\n                        })\r\n                    }\r\n                }\r\n                return\r\n            }\r\n            removeHighlightCells()\r\n        }\r\n    }\r\n\r\n    isPieceSelected = true\r\n    selectedPiece = e.target\r\n    const cell = e.target.parentElement\r\n    const row = cell.getAttribute('data-row')\r\n    const col = cell.getAttribute('data-col')\r\n    const type = cell.getAttribute('data-type')\r\n    const color = type === type.toUpperCase() ? 'white' : 'black'\r\n\r\n    // Highlight possible moves if it's your turn \r\n    if (color === turn) {\r\n        const actualBoard = getActualBoard()\r\n        let pieceThatCheckedPos = []\r\n        if (lastPieceMovedByOpponent !== null) pieceThatCheckedPos = [Number(lastPieceMovedByOpponent.parentElement.getAttribute('data-row')), Number(lastPieceMovedByOpponent.parentElement.getAttribute('data-col'))]\r\n        let possibleMovesOfPiece = []\r\n        possibleMovesOfPiece = getPossibleMoves(row, col, actualBoard)\r\n        possibleMoves = [...possibleMovesOfPiece]\r\n\r\n        let movesToRemove = []\r\n        for (let i = 0; i < possibleMovesOfPiece.length; i++) {\r\n            let boardToCheck = getActualBoard()\r\n            const nextMove = possibleMovesOfPiece[i]\r\n            const piecePos = [Number(row), Number(col)]\r\n            boardToCheck[nextMove[0]][nextMove[1]] = boardToCheck[piecePos[0]][piecePos[1]]\r\n            boardToCheck[piecePos[0]][piecePos[1]] = ' '\r\n            if (getCheck(boardToCheck, 'white')) {\r\n                movesToRemove.push(nextMove)\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < movesToRemove.length; i++) {\r\n            possibleMovesOfPiece.splice(possibleMovesOfPiece.indexOf(movesToRemove[i]), 1)\r\n        }\r\n\r\n        if (possibleMovesOfPiece.length === 0) {\r\n            showCheckMessage()\r\n            return\r\n        }\r\n\r\n        if (possibleMovesOfPiece != undefined && possibleMovesOfPiece.length > 0) {\r\n            for (let i = 0; i < possibleMovesOfPiece.length; i++) {\r\n                if (mode === 'PvsP' || (mode === 'PvsAI' && turn === 'white')) {\r\n                    const cell = document.getElementsByClassName('cell')[possibleMovesOfPiece[i][0] * 8 + possibleMovesOfPiece[i][1]]\r\n                    cell.classList.add('highlight')\r\n                    cell.addEventListener('click', handleSquareClick)\r\n                }\r\n            }\r\n        }\r\n        possibleMoves = [...possibleMovesOfPiece]\r\n    }\r\n    else possibleMoves = []\r\n}\r\n\r\n// Square click event\r\nconst handleSquareClick = (e) => {\r\n    moveSound.play()\r\n    isPieceSelected = false\r\n    isCapture = false\r\n    if (mode === 'PvsAI' && turn === 'black') selectedPiece = AISelectedPiece\r\n\r\n    removeHighlightCells()\r\n\r\n    const nextCell = e.target\r\n    const nextMove = [nextCell.getAttribute('data-row'), nextCell.getAttribute('data-col')]\r\n    const selectedPiecePos = [selectedPiece.parentElement.getAttribute('data-row'), selectedPiece.parentElement.getAttribute('data-col')]\r\n    let actualBoard = getActualBoard()\r\n    checkIfCastleAndPlaceRook(nextMove, selectedPiecePos, actualBoard)\r\n\r\n    const selectedPieceType = selectedPiece.parentElement.getAttribute('data-type')\r\n    const selectedPieceRow = selectedPiecePos[0]\r\n    const selectedPieceCol = selectedPiecePos[1]\r\n    if (selectedPieceType === 'K' || (selectedPieceType === 'R' && selectedPieceRow === '7' && selectedPieceCol === '0')) {\r\n        whitesCanCastleLeft = false\r\n    }\r\n    if (selectedPieceType === 'K' || (selectedPieceType === 'R' && selectedPieceRow === '7' && selectedPieceCol === '7')) {\r\n        whitesCanCastleRight = false\r\n    }\r\n    if (selectedPieceType === 'k' || (selectedPieceType === 'r' && selectedPieceRow === '0' && selectedPieceCol === '0')) {\r\n        blacksCanCastleLeft = false\r\n    }\r\n    if (selectedPieceType === 'k' || (selectedPieceType === 'r' && selectedPieceRow === '0' && selectedPieceCol === '7')) {\r\n        blacksCanCastleRight = false\r\n    }\r\n\r\n    halfClock++\r\n    const cell = e.target\r\n    if (selectedPiece.parentElement.getAttribute('data-type') === 'P') {\r\n        halfClock = 0\r\n        const row = Number(selectedPiece.parentElement.getAttribute('data-row'))\r\n        if (Number(cell.getAttribute('data-row')) === row - 2) {\r\n            isDoubleMovePawn = true\r\n        }\r\n    }\r\n    else if (selectedPiece.parentElement.getAttribute('data-type') === 'p') {\r\n        halfClock = 0\r\n        const row = Number(selectedPiece.parentElement.getAttribute('data-row'))\r\n        if (Number(cell.getAttribute('data-row')) === row + 2) {\r\n            isDoubleMovePawn = true\r\n        }\r\n    }\r\n\r\n    const lastCell = selectedPiece.parentElement.cloneNode(true)\r\n    const pieceImg = selectedPiece.src\r\n    const pieceColor = selectedPiece.getAttribute('piece-color')\r\n    cell.setAttribute('data-type', selectedPiece.parentElement.getAttribute('data-type'))\r\n\r\n    if (isDoubleMovePawn) cell.setAttribute('isDoubleMovePawn', 'true')\r\n    isDoubleMovePawn = false\r\n\r\n    selectedPiece.parentElement.setAttribute('data-type', ' ')\r\n    if (selectedPiece.parentElement.getAttribute('isdoublemovepawn') === 'true') selectedPiece.parentElement.removeAttribute('isdoublemovepawn')\r\n    if (selectedPiece.parentElement.getAttribute('enpassantcapture') === 'true') selectedPiece.parentElement.removeAttribute('enpassantcapture')\r\n    selectedPiece.parentElement.removeChild(selectedPiece)\r\n\r\n    const pieceElement = document.createElement('img')\r\n    pieceElement.src = pieceImg\r\n    pieceElement.addEventListener('click', handlePieceClick)\r\n    pieceElement.setAttribute('piece-color', pieceColor)\r\n    cell.appendChild(pieceElement)\r\n\r\n    const nextMoveCell = e.target\r\n    checkIfPromotion(nextMoveCell, lastCell)\r\n    checkIfPawnCaptureEnPassant(nextMoveCell)\r\n\r\n    if (turn === 'white') {\r\n        stopTimer(whiteTimerIntervalId)\r\n        if (mode === 'PvsP') startTimer(blackTime, blacksDisplay, 'black')\r\n    }\r\n    else {\r\n        stopTimer(blackTimerIntervalId)\r\n        startTimer(whiteTime, whitesDisplay, 'white')\r\n    }\r\n\r\n    lastPieceMovedByOpponent = e.target.firstChild\r\n\r\n    changeTurn()\r\n\r\n    // AI moves\r\n    if (mode === 'PvsAI' && turn === 'black') {\r\n        if (!isBetterAI) {\r\n            actualBoard = getActualBoard()\r\n            const bestMoveData = chessAI.getPieceToMove(isCheck, isEndGame)\r\n            const pieceToMove = bestMoveData[0]\r\n            const bestMove = bestMoveData[1]\r\n            AISelectedPiece = pieceToMove\r\n\r\n            if (pieceToMove === null) {\r\n                showCheckMessage()\r\n                return\r\n            }\r\n\r\n            makeMove(pieceToMove, bestMove)\r\n            changeTurn()\r\n        }\r\n        else {\r\n            const boardToCheck = getActualBoard()\r\n            let actualFEN = chessAI.getFenFromBoard(boardToCheck, halfClock, whitesCanCastleRight, whitesCanCastleLeft, blacksCanCastleRight, blacksCanCastleLeft)\r\n\r\n            // Fetch for opening moves\r\n            getPieceToMove(actualFEN, isEndGame, isCheck).then(pieceToMoveData => {\r\n                const bestMove = pieceToMoveData[1]\r\n                const pieceToMove = pieceToMoveData[0].firstChild\r\n\r\n                makeMove(pieceToMove, bestMove)\r\n                changeTurn()\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst isValidMove = (pieceToMovePos, nextMove, board) => {\r\n    const pieceToMoveType = board[Number(pieceToMovePos[0])][Number(pieceToMovePos[1])]\r\n    const pieceToMoveColor = pieceToMoveType.toUpperCase() === pieceToMoveType ? 'white' : 'black'\r\n    if (nextMove[0] > 7 || nextMove[0] < 0 || nextMove[1] > 7 || nextMove[1] < 0) return false\r\n    const pieceType = board[Number(nextMove[0])][Number(nextMove[1])]\r\n\r\n    const color = pieceType === pieceType.toUpperCase() ? 'white' : 'black'\r\n    if (pieceType === ' ') return true\r\n    if (nextMove === pieceToMovePos) return true\r\n    if (color === pieceToMoveColor) return false\r\n    if (pieceToMoveType.toUpperCase() !== 'P') return 'capture'\r\n\r\n    else return false\r\n}\r\n\r\n// Mode selector\r\nconst createModeSelector = () => {\r\n    const modeSelector = document.getElementsByClassName('mode-selector')[0]\r\n    if (modeSelector) return modeSelector\r\n\r\n    const modeSelect = document.createElement('select')\r\n    modeSelect.classList.add('mode-selector')\r\n\r\n    const modeLabel = document.createElement('label')\r\n    modeLabel.innerHTML = 'Mode: '\r\n    modeLabel.id = 'mode-msg'\r\n\r\n    const pvp = document.createElement('option')\r\n    pvp.value = 'PvsP'\r\n    pvp.selected = true\r\n    pvp.innerHTML = 'PvsP'\r\n\r\n    const pvai = document.createElement('option')\r\n    pvai.value = 'PvsAI'\r\n    pvai.innerHTML = 'PvsAI'\r\n\r\n    modeSelect.appendChild(pvp)\r\n    modeSelect.appendChild(pvai)\r\n    modeSelect.addEventListener('change', startGame)\r\n    const modeDiv = document.getElementsByClassName('mode')[0]\r\n    modeDiv.appendChild(modeLabel)\r\n    modeDiv.appendChild(modeSelect)\r\n\r\n    return modeSelect\r\n}\r\n\r\n// Difficulty selector\r\nconst createDifficultySelector = () => {\r\n    const diffSelector = document.getElementsByClassName('difficulty-selector')[0]\r\n    if (diffSelector) return diffSelector\r\n\r\n    const diffSelect = document.createElement('select')\r\n    diffSelect.classList.add('difficulty-selector')\r\n\r\n    const diffLabel = document.createElement('label')\r\n    diffLabel.innerHTML = 'Difficulty: '\r\n    diffLabel.id = 'diff-msg'\r\n\r\n    const Easy = document.createElement('option')\r\n    Easy.value = 'Easy'\r\n    Easy.selected = true\r\n    Easy.innerHTML = 'Easy'\r\n\r\n    const Normal = document.createElement('option')\r\n    Normal.value = 'Normal'\r\n    Normal.innerHTML = 'Normal'\r\n\r\n    diffSelect.appendChild(Easy)\r\n    diffSelect.appendChild(Normal)\r\n    diffSelect.addEventListener('change', startGame)\r\n    const diffDiv = document.getElementsByClassName('difficulty')[0]\r\n    diffDiv.appendChild(diffLabel)\r\n    diffDiv.appendChild(diffSelect)\r\n\r\n    return diffSelect\r\n}\r\n\r\n// Place rook when castle\r\nexport const checkIfCastleAndPlaceRook = (nextMove, pieceToMovePos, board) => {\r\n    const pieceToMoveType = board[Number(pieceToMovePos[0])][Number(pieceToMovePos[1])]\r\n    const nextCellRow = Number(nextMove[0])\r\n    const nextCellCol = Number(nextMove[1])\r\n    const nextCellType = board[nextCellRow][nextCellCol]\r\n\r\n    if (pieceToMoveType === 'K' && nextCellType === ' ') {\r\n        let whiteRook = null\r\n        let whiteRookCastleSquare = null\r\n        let rookMoved = null\r\n        if (whitesCanCastleLeft && nextCellRow === 7 && nextCellCol === 2) {\r\n            whiteRook = document.querySelector('[data-row=\"7\"][data-col=\"0\"]').firstChild\r\n            whiteRookCastleSquare = document.querySelector('[data-row=\"7\"][data-col=\"3\"]')\r\n            rookMoved = whiteRook.cloneNode(true)\r\n        }\r\n        else if (whitesCanCastleRight && nextCellRow === 7 && nextCellCol === 6) {\r\n            whiteRook = document.querySelector('[data-row=\"7\"][data-col=\"7\"]').firstChild\r\n            whiteRookCastleSquare = document.querySelector('[data-row=\"7\"][data-col=\"5\"]')\r\n            rookMoved = whiteRook.cloneNode(true)\r\n        }\r\n        if (whiteRook != null && whiteRookCastleSquare != null && rookMoved != null) {\r\n            rookMoved.addEventListener('click', handlePieceClick)\r\n            whiteRookCastleSquare.appendChild(rookMoved)\r\n            whiteRookCastleSquare.setAttribute('data-type', 'R')\r\n            whiteRook.parentElement.setAttribute('data-type', ' ')\r\n            whiteRook.parentElement.removeChild(whiteRook)\r\n            castleSound.play()\r\n        }\r\n    }\r\n    else if (pieceToMoveType === 'k' && nextCellType === ' ') {\r\n        let blackRook = null\r\n        let blackRookCastleSquare = null\r\n        let rookMoved = null\r\n        if (blacksCanCastleRight && nextCellRow === 0 && nextCellCol === 6) {\r\n            blackRook = document.querySelector('[data-row=\"0\"][data-col=\"7\"]').firstChild\r\n            blackRookCastleSquare = document.querySelector('[data-row=\"0\"][data-col=\"5\"]')\r\n            rookMoved = blackRook.cloneNode(true)\r\n        }\r\n        else if (blacksCanCastleLeft && nextCellRow === 0 && nextCellCol === 2) {\r\n            blackRook = document.querySelector('[data-row=\"0\"][data-col=\"0\"]').firstChild\r\n            blackRookCastleSquare = document.querySelector('[data-row=\"0\"][data-col=\"3\"]')\r\n            rookMoved = blackRook.cloneNode(true)\r\n        }\r\n        if (blackRook != null && blackRookCastleSquare != null && rookMoved != null) {\r\n            rookMoved.addEventListener('click', handlePieceClick)\r\n            blackRookCastleSquare.appendChild(rookMoved)\r\n            blackRookCastleSquare.setAttribute('data-type', 'r')\r\n            blackRook.parentElement.setAttribute('data-type', ' ')\r\n            blackRook.parentElement.removeChild(blackRook)\r\n            castleSound.play()\r\n        }\r\n    }\r\n}\r\n\r\n// Check if pawn can capture\r\nconst checkIfPawnCapture = (pos, board) => {\r\n    const row = Number(pos[0])\r\n    const col = Number(pos[1])\r\n    let possibleCaptures = []\r\n    if (board[row][col] === 'P') {\r\n        if (row - 1 < 0 || col + 1 > 7 || col - 1 < 0) return false\r\n        const pieceToCapture1 = board[row - 1][col + 1]\r\n        const pieceToCapture2 = board[row - 1][col - 1]\r\n        const pawnEnPassant1 = document.querySelector(`[data-row=\"${row}\"][data-col=\"${col + 1}\"]`)\r\n        const pawnEnPassant2 = document.querySelector(`[data-row=\"${row}\"][data-col=\"${col - 1}\"]`)\r\n\r\n        if (pieceToCapture1 !== ' ' && pieceToCapture1 === pieceToCapture1?.toLowerCase()) {\r\n            possibleCaptures.push([row - 1, col + 1])\r\n        }\r\n\r\n        if (pieceToCapture2 !== ' ' && pieceToCapture2 === pieceToCapture2?.toLowerCase()) {\r\n            possibleCaptures.push([row - 1, col - 1])\r\n        }\r\n\r\n        if (pawnEnPassant1?.getAttribute('isdoublemovepawn') === 'true' && pawnEnPassant1?.getAttribute('data-type') === 'p') {\r\n            const enPassantSquare = document.querySelector(`[data-row=\"${row - 1}\"][data-col=\"${col + 1}\"]`)\r\n            enPassantSquare.setAttribute('enpassantcapture', 'true')\r\n            possibleMoves.push(enPassantSquare)\r\n        }\r\n\r\n        if (pawnEnPassant2?.getAttribute('isdoublemovepawn') === 'true' && pawnEnPassant2?.getAttribute('data-type') === 'p') {\r\n            const enPassantSquare = document.querySelector(`[data-row=\"${row - 1}\"][data-col=\"${col - 1}\"]`)\r\n            enPassantSquare.setAttribute('enpassantcapture', 'true')\r\n            possibleMoves.push(enPassantSquare)\r\n        }\r\n    }\r\n    else if (board[row][col] === 'p') {\r\n        if (row + 1 > 7 || col + 1 > 7 || col - 1 < 0) return false\r\n        const pieceToCapture1 = board[row + 1][col + 1]\r\n        const pieceToCapture2 = board[row + 1][col - 1]\r\n        const pawnEnPassant1 = document.querySelector(`[data-row=\"${row}\"][data-col=\"${col + 1}\"]`)\r\n        const pawnEnPassant2 = document.querySelector(`[data-row=\"${row}\"][data-col=\"${col - 1}\"]`)\r\n\r\n        if (pieceToCapture1 !== ' ' && pieceToCapture1 === pieceToCapture1?.toUpperCase()) {\r\n            possibleCaptures.push([row + 1, col + 1])\r\n        }\r\n\r\n        if (pieceToCapture2 !== ' ' && pieceToCapture2 === pieceToCapture2?.toUpperCase()) {\r\n            possibleCaptures.push([row + 1, col - 1])\r\n        }\r\n\r\n        if (pawnEnPassant1?.getAttribute('isdoublemovepawn') === 'true' && pawnEnPassant1?.getAttribute('data-type') === 'P') {\r\n            const enPassantSquare = document.querySelector(`[data-row=\"${row + 1}\"][data-col=\"${col + 1}\"]`)\r\n            enPassantSquare.setAttribute('enpassantcapture', 'true')\r\n            possibleMoves.push(enPassantSquare)\r\n        }\r\n\r\n        if (pawnEnPassant2?.getAttribute('isdoublemovepawn') === 'true' && pawnEnPassant2?.getAttribute('data-type') === 'P') {\r\n            const enPassantSquare = document.querySelector(`[data-row=\"${row + 1}\"][data-col=\"${col - 1}\"]`)\r\n            enPassantSquare.setAttribute('enpassantcapture', 'true')\r\n            possibleMoves.push(enPassantSquare)\r\n        }\r\n    }\r\n    if (possibleCaptures.length > 0) return possibleCaptures\r\n    return false\r\n}\r\n\r\nconst checkIfPawnCaptureEnPassant = (nextMoveCell) => {\r\n    const row = Number(nextMoveCell.getAttribute('data-row'))\r\n    const col = Number(nextMoveCell.getAttribute('data-col'))\r\n    if (nextMoveCell?.getAttribute('enpassantcapture') === 'true' && nextMoveCell?.getAttribute('data-type') === 'P') {\r\n        captureSound.play()\r\n        const pieceToCapture = document.querySelector(`[data-row=\"${row + 1}\"][data-col=\"${col}\"]`)\r\n        pieceToCapture.removeChild(pieceToCapture.firstChild)\r\n    }\r\n    if (nextMoveCell?.getAttribute('enpassantcapture') === 'true' && nextMoveCell?.getAttribute('data-type') === 'p') {\r\n        captureSound.play()\r\n        const pieceToCapture = document.querySelector(`[data-row=\"${row - 1}\"][data-col=\"${col}\"]`)\r\n        pieceToCapture.removeChild(pieceToCapture.firstChild)\r\n    }\r\n}\r\n\r\n// Add double move pawn if possible\r\nconst checkIfPawnsInitialMove = (pos, board) => {\r\n    if (board[pos[0]][pos[1]].toUpperCase() === 'P') {\r\n        const row = pos[0]\r\n        const col = pos[1]\r\n        const pieceColor = board[row][col] === board[row][col].toLowerCase() ? 'black' : 'white'\r\n        if (pieceColor === 'black' && row !== 1) {\r\n            return\r\n        }\r\n        else if (pieceColor === 'white' && row !== 6) {\r\n            return\r\n        }\r\n        const doubleMoveSquare = pieceColor === 'black' ? board[row + 2][col] : board[row - 2][col]\r\n        const isPieceBetweenWhiteMove = board[row - 1][col] !== ' '\r\n        const isPieceBetweenBlackMove = board[row + 1][col] !== ' '\r\n\r\n        if (board[row][col] === 'P' && doubleMoveSquare === ' ' && !isPieceBetweenWhiteMove) {\r\n            return true\r\n        }\r\n        else if (board[row][col] === 'p' && doubleMoveSquare === ' ' && !isPieceBetweenBlackMove) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    else return false\r\n}\r\n\r\n// Queen promotion\r\nconst checkIfPromotion = (nextMoveCell, lastCell) => {\r\n    const squareToCheck = isCapture ? lastCell : nextMoveCell.cloneNode(true)\r\n    const targetSquare = isCapture ? lastCell : nextMoveCell\r\n\r\n    const row = isCapture ? Number(lastCell.getAttribute('data-row')) : Number(nextMoveCell.getAttribute('data-row'))\r\n\r\n    if (squareToCheck?.getAttribute('data-type') === 'P' && row === 0) {\r\n        targetSquare.removeChild(targetSquare.firstChild)\r\n        const promotedPiece = document.createElement('img')\r\n        promotedPiece.src = pieces['Q']['image']\r\n        promotedPiece.setAttribute('piece-color', 'white')\r\n        promotedPiece.addEventListener('click', handlePieceClick)\r\n        targetSquare.setAttribute('data-type', 'Q')\r\n        targetSquare.appendChild(promotedPiece)\r\n    }\r\n    else if (targetSquare?.getAttribute('data-type') === 'p' && row === 7) {\r\n        targetSquare.removeChild(targetSquare.firstChild)\r\n        const promotedPiece = document.createElement('img')\r\n        promotedPiece.src = pieces['q']['image']\r\n        promotedPiece.setAttribute('piece-color', 'black')\r\n        promotedPiece.addEventListener('click', handlePieceClick)\r\n        targetSquare.setAttribute('data-type', 'q')\r\n        targetSquare.appendChild(promotedPiece)\r\n    }\r\n}\r\n\r\n// get possible moves for a piece\r\nexport const getPossibleMoves = (row, col, board) => {\r\n    let possibleNextMoves = []\r\n\r\n    const pieceType = board[Number(row)][Number(col)]\r\n    const moves = pieces[pieceType]['moves']\r\n\r\n    if (whitesCanCastleLeft && pieceType === 'K' && row === '7' && col === '4') {\r\n        const castleSquare1 = board[7][1]\r\n        const castleSquare2 = board[7][2]\r\n        const castleSquare3 = board[7][3]\r\n\r\n        if (castleSquare1 === ' ' && castleSquare2 === ' ' && castleSquare3 === ' ') {\r\n            possibleNextMoves.push([7, 2])\r\n        }\r\n    }\r\n    if (whitesCanCastleRight && pieceType === 'K' && row === '7' && col === '4') {\r\n        const castleSquare1 = board[7][5]\r\n        const castleSquare2 = board[7][6]\r\n\r\n        if (castleSquare1 === ' ' && castleSquare2 === ' ') {\r\n            possibleNextMoves.push([7, 6])\r\n        }\r\n    }\r\n    if (blacksCanCastleLeft && pieceType === 'k' && row === '0' && col === '4') {\r\n        const castleSquare1 = board[0][1]\r\n        const castleSquare2 = board[0][2]\r\n        const castleSquare3 = board[0][3]\r\n\r\n        if (castleSquare1 === ' ' && castleSquare2 === ' ' && castleSquare3 === ' ') {\r\n            possibleNextMoves.push([0, 2])\r\n        }\r\n    }\r\n    if (blacksCanCastleRight && pieceType === 'k' && row === '0' && col === '4') {\r\n        const castleSquare1 = board[0][5]\r\n        const castleSquare2 = board[0][6]\r\n\r\n        if (castleSquare1 === ' ' && castleSquare2 === ' ') {\r\n            possibleNextMoves.push([0, 6])\r\n        }\r\n    }\r\n\r\n    if (pieceType.toUpperCase() === 'P') {\r\n        const position = [Number(row), Number(col)]\r\n        const pawnCaptures = checkIfPawnCapture(position, board)\r\n        if (pawnCaptures !== false) {\r\n            for (let i = 0; i < pawnCaptures.length; i++) {\r\n                possibleNextMoves.push(pawnCaptures[i])\r\n            }\r\n        }\r\n        if (checkIfPawnsInitialMove(position, board)) {\r\n            if (pieceType === 'p') {\r\n                possibleNextMoves.push([Number(row) + 2, Number(col)])\r\n            }\r\n            else {\r\n                possibleNextMoves.push([Number(row) - 2, Number(col)])\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < moves.length; i++) {\r\n        let newRows = []\r\n        let newCols = []\r\n        if (pieceType.toUpperCase() === 'P' || pieceType.toUpperCase() === 'N' || pieceType.toUpperCase() === 'K') {\r\n            newRows.push(Number(row) + moves[i][0])\r\n            newCols.push(Number(col) + moves[i][1])\r\n        }\r\n        else {\r\n            for (let j = 0; j < 7; j++) {\r\n                if (moves[i][0] > 0) {\r\n                    newRows.push(Number(row) + moves[i][0] + j)\r\n                }\r\n                else if (moves[i][0] < 0) {\r\n                    newRows.push(Number(row) + moves[i][0] - j)\r\n                }\r\n                else if (moves[i][0] === 0) {\r\n                    newRows.push(Number(row))\r\n                }\r\n                if (moves[i][1] > 0) {\r\n                    newCols.push(Number(col) + moves[i][1] + j)\r\n                }\r\n                else if (moves[i][1] < 0) {\r\n                    newCols.push(Number(col) + moves[i][1] - j)\r\n                }\r\n                else if (moves[i][1] === 0) {\r\n                    newCols.push(Number(col))\r\n                }\r\n            }\r\n        }\r\n\r\n        let nextMove = []\r\n        for (let j = 0; j < newRows.length; j++) {\r\n            nextMove = [newRows[j], newCols[j]]\r\n            if (isValidMove([Number(row), Number(col)], nextMove, board) === false) {\r\n                newRows.splice(j, newRows.length - j)\r\n                newCols.splice(j, newCols.length - j)\r\n                break\r\n            }\r\n            else if (isValidMove([Number(row), Number(col)], nextMove, board) === 'capture') {\r\n                newRows.splice(j + 1, newRows.length - j)\r\n            }\r\n        }\r\n        if (newRows.length > 0) {\r\n            for (let j = 0; j < newRows.length; j++) {\r\n                nextMove = [newRows[j], newCols[j]]\r\n                const newCell = board[newRows[j]][newCols[j]]\r\n                const newCellColor = newCell.toUpperCase() === newCell ? 'white' : 'black'\r\n                const pieceToMoveColor = pieceType.toUpperCase() === pieceType ? 'white' : 'black'\r\n                if (newCell === ' ') {\r\n                    possibleNextMoves.push(nextMove)\r\n                }\r\n                else if (newCellColor !== pieceToMoveColor) {\r\n                    possibleNextMoves.push(nextMove)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    possibleMoves = [...possibleNextMoves]\r\n    return possibleNextMoves\r\n}\r\n\r\nconst showCheckMessage = () => {\r\n    if (!isCheck) {\r\n        setTimeout(() => {\r\n            alert('Stalemate!')\r\n        }, 100)\r\n    }\r\n    else {\r\n        setTimeout(() => {\r\n            alert('Checkmate!')\r\n        }, 100)\r\n    }\r\n}\r\n\r\nconst makeMove = (pieceToMove, bestMove) => {\r\n\r\n    let actualBoard = getActualBoard()\r\n\r\n    if (pieceToMove.parentElement.getAttribute('data-type').toUpperCase() === 'P' || actualBoard[bestMove[0]][bestMove[1]] !== ' ') {\r\n        halfClock = 0\r\n    }\r\n    else halfClock++\r\n\r\n    const pieceToMovePos = [Number(pieceToMove.parentElement.getAttribute('data-row')), Number(pieceToMove.parentElement.getAttribute('data-col'))]\r\n    const dataArray = chessAI.makeMove(bestMove, pieceToMovePos, actualBoard, isDoubleMovePawn, blacksCanCastleRight, blacksCanCastleLeft)\r\n\r\n    const materialLeft = getMaterialInBoard()\r\n    if (materialLeft[0] < 1400 && materialLeft[1] < 1400) {\r\n        isEndGame = true\r\n    }\r\n\r\n    const lastAICell = dataArray[0]\r\n    const nextMoveAICell = dataArray[1]\r\n    lastPieceMovedByOpponent = dataArray[2]\r\n\r\n    isDoubleMovePawn = dataArray[3]\r\n\r\n    blacksCanCastleRight = dataArray[4]\r\n    blacksCanCastleLeft = dataArray[5]\r\n\r\n    checkIfPromotion(nextMoveAICell, lastAICell)\r\n    checkIfPawnCaptureEnPassant(nextMoveAICell)\r\n\r\n    actualBoard = getActualBoard()\r\n    const possibleWhiteMoves = getOneSidePossibleMoves('white', actualBoard, true)\r\n    if (possibleWhiteMoves.length === 0) {\r\n        showCheckMessage()\r\n        return\r\n    }\r\n}\r\n\r\nconst changeTurn = () => {\r\n    let actualBoard = getActualBoard()\r\n\r\n    turn = turn === 'white' ? 'black' : 'white'\r\n\r\n    actualFEN = createFEN()\r\n    isCheck = getCheck(actualBoard, 'white')\r\n    if (isCheck) checkSound.play()\r\n}\r\n\r\nconst removeHighlightCells = () => {\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            const cell = document.getElementsByClassName('cell')[i * 8 + j]\r\n            cell.classList.remove('highlight')\r\n            cell.removeEventListener('click', handleSquareClick)\r\n        }\r\n    }\r\n}","import { chessAI } from \"../chessAI\"\r\n\r\nexport const getMaterialInBoard = () => {\r\n    const wp = chessAI.getNumberOfPieces('white', 'P')\r\n    const wn = chessAI.getNumberOfPieces('white', 'N')\r\n    const wb = chessAI.getNumberOfPieces('white', 'B')\r\n    const wr = chessAI.getNumberOfPieces('white', 'R')\r\n    const wq = chessAI.getNumberOfPieces('white', 'Q')\r\n    const bp = chessAI.getNumberOfPieces('black', 'p')\r\n    const bn = chessAI.getNumberOfPieces('black', 'n')\r\n    const bb = chessAI.getNumberOfPieces('black', 'b')\r\n    const br = chessAI.getNumberOfPieces('black', 'r')\r\n    const bq = chessAI.getNumberOfPieces('black', 'q')\r\n\r\n    const blackMaterial = 100 * bp + 300 * bn + 330 * bb + 500 * br + 900 * bq\r\n    const whiteMaterial = 100 * wp + 300 * wn + 330 * wb + 500 * wr + 900 * wq\r\n    return [whiteMaterial, blackMaterial]\r\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","pieces","getActualBoard","board","i","j","cellType","querySelector","getAttribute","DEFAULT_POSITION","TERMINATION_MARKERS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","SHIFTS","BITS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","SQUARE_MAP","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","infer_piece_type","san","piece_type","charAt","match","PAWN","toLowerCase","KING","stripped_san","move","rank","file","algebraic","f","substring","swap_color","c","WHITE","BLACK","clone","dupe","Array","property","trim","str","EMPTY","FLAGS","keys","push","Chess","fen","kings","turn","castling","ep_square","half_moves","move_number","history","header","comments","clear","keep_headers","update_setup","generate_fen","prune_comments","reversed_history","current_comments","copy_comment","undo_move","make_move","pop","reset","load","tokens","split","position","validate_fen","valid","piece","indexOf","parseInt","color","put","type","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","sq","build_move","from","to","flags","promotion","captured","generate_moves","options","add_move","moves","len","us","them","second_rank","first_sq","last_sq","single_square","legal","offset","castling_to","castling_from","attacked","legal_moves","king_attacked","move_to_san","output","disambiguator","ambiguities","same_rank","same_file","ambig_from","ambig_to","get_disambiguator","in_check","in_checkmate","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","old","move_from_san","sloppy","clean_move","parser","overly_disambiguated","matches","make_pretty","ugly_move","perft","depth","nodes","ugly_moves","verbose","in_draw","game_over","row","pgn","newline","newline_char","max_width","result","header_exists","append_comment","move_string","comment","Result","strip","wrap_comment","width","token","current_width","includes","load_pgn","mask","header_regex","RegExp","header_string","exec","headers","header_obj","value","regex","parse_pgn_header","encode_comment","string","map","charCodeAt","toString","encodeURIComponent","to_hex","decode_comment","startsWith","endsWith","decodeURIComponent","from_hex","ms","bracket","semicolon","undefined","rav_regex","half_move","arguments","move_obj","pretty_move","undo","ascii","s","remove","square_color","sq_0x88","move_history","get_comment","set_comment","delete_comment","get_comments","delete_comments","game","values","minimaxAI","minimaxRoot","isMaximisingPlayer","isEndGame","newGameMoves","bestMove","bestMoveFound","newGameMove","minimax","alpha","beta","betterEvaluateBoard","Math","max","min","wp","bp","wn","bn","wb","bb","wr","br","wq","bq","pawnsq","knightsq","bishopsq","rooksq","queensq","kingsq","pieceType","evaluation","uciBoard","getOpeningMoves","actualFEN","fetch","method","resp","json","data","getBestMoveToOpen","bestOpeningMove","averageBlackWin","openingMoves","black","white","draws","blackPercentage","uci","startingPos","endingPos","bestMoveToOpen","getPieceToMove","isCheck","then","setTimeout","alert","pieceToMovePos","pieceToMove","getOneSidePossibleMoves","checkForCheck","piecesOfColorInBoard","col","possibleMovesFromSide","piecePos","Number","boardCopy","l","possibleMovesToCheck","getPossibleMoves","movesToRemove","boardToCheck","nextMove","getCheck","splice","colorToCheck","possibleOppositeColorMoves","king","kingPos","isThereACheck","some","cell","getGridFromFen","moveSound","Audio","movesound","captureSound","capturesound","checkSound","checksound","numberOfMoves","chessAI","makeMove","isDoubleMovePawn","blacksCanCastleRight","blacksCanCastleLeft","pieceToMoveCell","pieceToMoveType","nextCell","isCapture","canCastleRight","canCastleLeft","checkIfCastleAndPlaceRook","play","firstChild","setAttribute","removeAttribute","appendChild","bestMoveValue","bestMovesWithSameValue","cells","querySelectorAll","actualBoard","possibleMovesOfWhites","possibleMoves","pieceInCell","newMoveValue","pieceValue","whitePieceToMoveRow","whitePieceToMoveCol","whitePieceToMoveValue","nextMoveRow","nextMoveCol","blackPieceToMoveRow","blackPieceToMoveCol","blackPieceToMovePosValue","newMoveData","getBestMove","randomIndex","floor","random","pieceToMoveRow","pieceToMoveCol","moveCellType","totalMoveValue","cellMoves","moveRow","moveCol","pieceToMoveValue","moveValue","possibleMovesOfBlacks","pieceToCaptureAfterCapture","find","pieceToCaptureAfterCaptureType","pieceToCaptureAfterCaptureValue","evaluateBoard","getNumberOfPieces","material","numberOfPieces","getFenFromBoard","halfClock","cK","cQ","ck","cq","emptyCells","castles","primaryNav","navToggle","addEventListener","initialFEN","isPieceSelected","selectedPiece","AISelectedPiece","whitesCanCastleRight","whitesCanCastleLeft","mode","lastPieceMovedByOpponent","isBetterAI","whiteTimerIntervalId","blackTimerIntervalId","whiteTime","blackTime","castleSound","castlesound","getElementById","startGame","onload","whitesDisplay","getElementsByClassName","blacksDisplay","timerLine","setInitialStateVariables","stopTimer","display","innerHTML","classList","add","lastGrid","createModeSelector","difficulty","displays","mobileDisplays","createDifficultySelector","parentElement","grid","createElement","piecesInBoard","placePiece","handlePieceClick","startTimer","duration","minutes","seconds","timer","Date","now","setInterval","elapsedTime","timerIntervalId","clearInterval","target","removeHighlightCells","possibleNextMoves","pieceMoved","cloneNode","removeChild","checkIfPromotion","changeTurn","pieceToMoveData","bestMoveData","showCheckMessage","possibleMovesOfPiece","handleSquareClick","selectedPiecePos","selectedPieceType","selectedPieceRow","selectedPieceCol","lastCell","pieceImg","pieceColor","pieceElement","nextMoveCell","checkIfPawnCaptureEnPassant","isValidMove","pieceToMoveColor","modeSelector","modeSelect","modeLabel","id","pvp","selected","pvai","modeDiv","diffSelector","diffSelect","diffLabel","Easy","Normal","diffDiv","nextCellRow","nextCellCol","nextCellType","whiteRook","whiteRookCastleSquare","rookMoved","blackRook","blackRookCastleSquare","pieceToCapture","squareToCheck","targetSquare","promotedPiece","castleSquare1","castleSquare2","castleSquare3","pawnCaptures","pos","possibleCaptures","pieceToCapture1","pieceToCapture2","pawnEnPassant1","pawnEnPassant2","enPassantSquare","checkIfPawnCapture","doubleMoveSquare","isPieceBetweenWhiteMove","isPieceBetweenBlackMove","checkIfPawnsInitialMove","newRows","newCols","newCell","newCellColor","dataArray","materialLeft","lastAICell","nextMoveAICell","spaceCounter","String","createFEN","removeEventListener"],"sourceRoot":""}